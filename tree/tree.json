{"lib":{"type":"directory","pem":{"type":"directory","seaofsea.pem":{"type":"file"}},"services":{"type":"directory","custom_list.dart":{"Purpose":"Farklı liste stillerini (bullet, decimal, alpha, roman) destekleyen özel liste widget’ı.","Enum":{"ListStyle":["bullet – • işaretli","decimal – 1. 2. 3.","lowerAlpha – a. b. c.","upperAlpha – A. B. C.","upperRoman – I. II. III.","lowerRoman – i. ii. iii."]},"Classes":{"CustomListItem":{"Purpose":"Tek bir liste öğesini temsil eder (çocuk öğeleriyle birlikte).","Parameters":["text – Metin içeriği.","children – Alt liste öğeleri.","align – Metin hizalama.","underline, overline – Çizgi stilleri.","weight – Yazı kalınlığı.","color – Renk.","italic – İtalik yazı mı?"]},"CustomList":{"Purpose":"Listeyi Flutter’da render eden ana widget.","Constructor Parameters":["items – Listelenecek CustomListItem’lar.","style – Liste stili (varsayılan bullet).","textStyle – Yazı stili.","spacing – Liste öğeleri arasındaki boşluk (default: 8.0)."],"Methods":{"_buildList":"Listeyi recursive (alt liste dahil) şekilde oluşturur.","_getStyleForDepth":"Liste derinliğine göre stil seçer (örneğin alt listede farklı stiller).","_getListPrefix":"Liste öğesi başındaki prefix’i (•, 1., a., vb.) belirler.","_buildTextStyle":"Öğe için metin stilini oluşturur (çizgi, renk, italik vb.).","_getAlignment":"TextAlign değerini alır (default: left)."}}},"type":"file"},"custom_text_editor.dart":{"Purpose":"Flutter Quill tabanlı özelleştirilebilir metin editörü bileşeni.","Global Variables":{"defaultToolbarButtons":"Tüm araç çubuğu butonlarının varsayılan ayarları.","minimalToolbarButtons":"En temel buton ayarları (bold, italic, underline).","maximalToolbarButtons":"Tüm butonlar aktif olacak şekilde ayarlanmış yapı."},"Functions":{"buildCustomToolbarButtons":{"Purpose":"Verilen temel buton ayarlarıyla override yapılarını birleştirir.","Parameters":{"base":"Anahtar/Değer çiftlerinden oluşan temel buton ayarları.","override":"Opsiyonel, eklenecek ya da üzerine yazılacak buton ayarları."}}},"Classes":{"QuillTextEditor":{"Purpose":"Stateful Widget – Rich text editörü bileşeni.","Constructor Parameters":{"initialJsonDelta":"Başlangıç JSON delta verisi.","onSubmit":"Kaydetme veya gönderme işleminde tetiklenecek callback.","submitLabel":"Kaydet butonundaki yazı (default: 'Save').","showAll":"Tüm toolbar butonlarını gösterir mi? (default: true).","toolbarButtons":"Opsiyonel, özel toolbar buton dizisi.","minHeight":"Editör minimum yüksekliği (default: 50)."},"State":{"QuillTextEditorState":{"Purpose":"Editör state’ini yönetir.","Variables":{"_controller":"QuillController – Editör içeriğini yönetir.","_editorFocusNode":"FocusNode – Editör focus kontrolü.","_editorScrollController":"ScrollController – Editör scroll kontrolü."},"Methods":{"getJson":"Editördeki içeriği JSON delta formatında döner.","initState":"Başlangıç ayarlarını yapar, eğer initialJsonDelta varsa içeriği yükler.","dispose":"Kaynakları temizler.","_submit":"onSubmit callback’ini tetikler ve editör içeriğini JSON delta olarak gönderir.","build":"Editörü ve toolbar’ı Flutter widget ağacına yerleştirir."}}}}},"type":"file"},"date_time_service.dart":{"Purpose":"Tarih ve saat formatlama, dönüştürme ve metinleştirme işlemlerini merkezi olarak yönetir.","Class":"DateTimeService","Methods":{"convertDateTimeToString":{"Purpose":"DateTime nesnesini belirtilen formata göre String’e dönüştürür.","Parameters":{"dateTime":"DateTime – Dönüştürülecek tarih ve saat.","format":"String – Kullanılacak format, varsayılan: 'yyyy-MM-dd HH:mm'."}},"parseStringToDateTime":{"Purpose":"Bir tarih ve saat String’ini DateTime nesnesine dönüştürür.","Parameters":{"dateTimeString":"String – Dönüştürülecek tarih ve saat metni.","format":"String – Beklenen format, varsayılan: 'yyyy-MM-dd HH:mm'."}}},"type":"file"},"image_service.dart":{"Purpose":"Resim seçme ve kırpma işlemlerini yönetir.","Class":"ImageService","Methods":{"pickAndCropImage":{"Purpose":"Kullanıcıdan bir resim seçer (galeri) ve kırpma yapılacaksa ilgili işlemleri hazırlar.","Parameters":{"context":"BuildContext – Flutter context","aspectRatio":"double – Resmin kırpılacağı oran"},"Steps":["ImagePicker kullanarak galeri üzerinden resim seçilir.","Seçilen resim yoksa (null) işlem durur ve null döner.","Başarılı ise File objesi olarak geri döner.","Hata olursa debugPrint ile hata loglanır ve null döner."]}},"type":"file"},"providers.dart":{"Purpose":"Uygulamadaki tüm Provider yapılarını merkezi olarak tanımlar.","Providers":[{"Type":"ChangeNotifierProvider","Instance":"RoleProvider","Purpose":"Kullanıcının rolünü yönetir."},{"Type":"ChangeNotifierProvider","Instance":"LoadingProvider","Purpose":"Yükleme durumlarını kontrol eder."},{"Type":"ChangeNotifierProvider","Instance":"ThemeProvider","Purpose":"Tema ve görünüm modlarını yönetir."},{"Type":"ChangeNotifierProvider","Instance":"AuthProvider","Purpose":"Kullanıcının kimlik bilgilerini ve login durumunu yönetir."},{"Type":"ChangeNotifierProvider","Instance":"ColorBlindnessProvider","Purpose":"Renk körlüğü modlarını yönetir."},{"Type":"ChangeNotifierProvider","Instance":"MenuItemsProvider().loadDynamicMenuItems()","Purpose":"Dinamik menü öğelerini yükler ve yönetir."},{"Type":"ChangeNotifierProvider","Instance":"DynamicFieldProvider","Purpose":"Dinamik form alanlarını yönetir."},{"Type":"ProxyProvider","Instance":"ApiManager(authProvider.token)","Purpose":"AuthProvider’daki token’ı kullanarak API isteklerini yönetir."}],"type":"file"},"routes.dart":{"generateRoute":{"Purpose":"Uygulamanın tüm sayfa yönlendirmelerini merkezi olarak yönetir.","RouteCases":{"/":"Ana sayfa - MainPage","/login":"Giriş ekranı - AuthPage (login modu)","/register":"Kayıt ekranı - AuthPage (register modu)","/home":"Ana ekran - HomePage","/admin":"Admin paneli - AdminDashboard","/settings":"Kullanıcı ayarları - SettingsPage","/public_profile_page":"Kullanıcının herkese açık profili - PublicProfilePage","/manage_company":"Şirketleri yönetme - ManageCompanyPage","/create_company":"Yeni şirket oluşturma - CreateCompanyPage","/company_list":"Şirket listesi - CompanyListPage","/company_detail":"Şirket detayları - CompanyShowcasePage","/update_company":"Şirket güncelleme - UpdateCompanyPage","/manage_company_users":"Şirkete ait kullanıcıları yönetme - ManageCompanyUsersPage","/company_settings":"Şirket ayarları - CompanySettingsPage","default":"Bilinmeyen sayfa - Hata mesajı gösterir"}},"navigateReplacement":{"Purpose":"Belirtilen sayfaya geçiş yapar ve geri dönüşü engeller (pushReplacement).","Parameters":{"routeName":"Gidilecek sayfa adı","arguments":"Opsiyonel olarak sayfaya iletilecek argümanlar"}},"type":"file"}},"utils":{"type":"directory","api_manager.dart":{"Purpose":"Tüm API isteklerini merkezi olarak yöneten sınıf.","Class":"ApiManager","Constructor":{"Purpose":"API Manager'ı başlatır ve varsayılan URL'leri ayarlar.","Parameters":["token – Bearer token","baseUrl – API’nin ana URL’si (varsayılan: https://localhost/seaofsea)","baseAddress – API PHP dosya yolu (varsayılan: /public/api.php)"]},"Methods":{"showImage":{"Purpose":"Verilen imagePath’e göre tam URL döner."},"request":{"Purpose":"GET ve POST isteklerini işler, 401 durumunda token yeniler.","Parameters":["context – BuildContext","endpoint – İstek yapılacak API endpoint’i","method – HTTP metodu (GET/POST)","body – Gönderilecek veri (opsiyonel)","queryParams – Query parametreleri (opsiyonel)"],"Flow":["Token kontrolü yapar.","GET ya da POST isteği gönderir.","401 Unauthorized ise refreshToken çağırır ve yeniden dener.","Başarılı yanıtı _handleResponse metoduna yollar."]},"post":{"Purpose":"POST isteklerini kısayol olarak çağırır (request metodunu kullanır)."},"get":{"Purpose":"GET isteklerini kısayol olarak çağırır (request metodunu kullanır)."},"_handleResponse":{"Purpose":"API yanıtını işler, Snackbar gösterir ve response döner."},"postMultipartWithImage":{"Purpose":"Görsel içeren POST isteklerini multipart/form-data olarak gönderir.","Parameters":["context – BuildContext","action – API endpoint","fields – Form verileri","imageFile – Opsiyonel resim dosyası"],"Flow":["Kullanıcı ID'si ve image eklenir.","401 durumunda token yeniler ve yeniden dener."]},"uploadImage":{"Purpose":"Tek bir görsel yükler ve AuthProvider’ı günceller.","Parameters":["context – BuildContext","endpoint – API endpoint","file – Yüklenecek dosya","meta – Opsiyonel meta veriler"],"Flow":["Kullanıcı ID'si yoksa AuthProvider.refreshUserInfo çağırır.","Görsel yüklenir ve profil resmi güncellenir."]},"_refreshToken":{"Purpose":"Refresh token kullanarak yeni token alır ve storage’a kaydeder.","Flow":["Eğer istek devam ediyorsa (isRefreshing=true), yenileme iptal edilir.","Başarılı olursa yeni token’ı saklar.","Başarısızsa false döner."]},"_showSnackbar":{"Purpose":"Verilen mesajı Flutter SnackBar olarak gösterir."}},"type":"file"},"theme_selector.dart":{"Purpose":"Uygulamada tema ve renk körlüğü modlarını seçmek için açılır menü bileşeni (PopupMenu).","Class":"ThemeSelector","Methods":{"build":{"Purpose":"PopupMenuButton ile tema ve renk körlüğü modlarını seçme, ayrıca blur ve efekt ayarlarını yönetme.","Flow":["PopupMenuButton açılır menüsü ikonu: Tema moduna göre Light/Dark icon.","Kullanıcı seçim yapınca ilgili ayar (themeProvider, colorBlindnessProvider) güncellenir.","Özel item'lar: Light/Dark Theme, Blur Level, Effect On/Off switch, Color Blindness modları (Protanopia, Deuteranopia, Tritanopia, Achromatopsia)."]},"_showBlurSlider":{"Purpose":"Kullanıcı blur efekti seviyesini seçmesi için slider'ı gösterir."},"_buildThemeOption":{"Purpose":"Popup için Light ve Dark tema seçeneklerini oluşturur.","Parameters":{"value":"Seçim değeri (Light/Dark)","label":"Seçim etiketi","context":"BuildContext"}},"_buildColorBlindnessOption":{"Purpose":"Popup için renk körlüğü modlarını oluşturur.","Parameters":{"effect":"Renk körlüğü efekti","label":"Etiket"}}},"type":"file"},"theme_provider.dart":{"Purpose":"Uygulama temasını ve modları yönetir.","Class":"ThemeProvider","Properties":{"_themeMode":"Light, dark ya da system modlarını temsil eder.","_isDarkMode":"Geçerli temanın dark modda olup olmadığını true/false döner."},"Getters":{"themeMode":"Geçerli themeMode değerini döner (ThemeMode).","isDarkMode":"Dark mod aktif mi? true/false."},"Methods":{"toggleTheme":{"Purpose":"Tema modunu (light/dark) değiştirir ve notify eder."},"setThemeMode":{"Purpose":"Verilen ThemeMode’u ayarlar ve notify eder.","Parameters":{"mode":"ThemeMode – Yeni tema modu."}}},"type":"file"},"theme_data.dart":{"Purpose":"Uygulamanın light ve dark temalarını tanımlar.","Theme Definitions":{"lightTheme":{"Brightness":"Light","PrimaryColor":"Colors.blue","ScaffoldBackgroundColor":"Colors.white","AppBarTheme":{"Color":"Colors.blue","Elevation":0},"TextTheme":"Material Typography - default"},"darkTheme":{"Brightness":"Dark","PrimaryColor":"Colors.blueGrey","ScaffoldBackgroundColor":"Colors.black","AppBarTheme":{"Color":"Colors.blueGrey","Elevation":0},"TextTheme":"Material Typography - default"}},"type":"file"},"secure_storage.dart":{"Purpose":"Cihazdaki güvenli alanda verileri saklamak ve okumak için yardımcı sınıf (Secure Storage).","Class":"SecureStorage","Methods":{"writeSecureData":{"Purpose":"Anahtar-değer çiftini güvenli alana kaydeder.","Parameters":{"key":"Verinin saklanacağı anahtar.","value":"Verinin kendisi."}},"readSecureData":{"Purpose":"Belirtilen anahtarın değerini okur ve döner.","Parameters":{"key":"Okunacak anahtar."},"Returns":"Okunan değer (String?)."},"deleteSecureData":{"Purpose":"Belirtilen anahtarın değerini güvenli alandan siler.","Parameters":{"key":"Silinecek anahtar."}},"deleteAllSecureData":{"Purpose":"Tüm verileri güvenli alandan siler (genel temizleme)."}},"type":"file"},"role_provider.dart":{"Purpose":"Uygulamada kullanılacak kullanıcı rollerini tanımlayan ve yöneten provider yapısı.","Class":"RoleProvider","Properties":{"_roles":"Rol ID’sini rol ismine eşleyen Map<String, String> veri yapısı."},"Getters":{"roles":"Tüm rol listesi (kopyalanmış hali) döner."},"Methods":{"getRoleNameById":{"Purpose":"Verilen rol ID’sine karşılık gelen rol ismini döner.","Parameters":{"roleId":"int – Aranan rol ID’si."}},"setRole":{"Purpose":"Verilen rol ID’sine göre rol ismini günceller ve UI’yı notify eder.","Parameters":{"roleId":"int – Güncellenecek rol ID’si."}}},"type":"file"},"role_manager.dart":{"Purpose":"Kullanıcı rollerini yönetmek, rol bazlı erişim kontrolü ve açıklamalar sağlamak.","Class":"RoleManager","Constants":{"anonymous":"Anonymous rolü (misafir).","user":"User rolü (standart kullanıcı).","admin":"Admin rolü (tam yetkili).","moderator":"Moderator rolü."},"Methods":{"getRoleDescription":{"Purpose":"Verilen rol adını açıklamaya çevirir.","Parameters":"role – Rol adı (String)."},"hasAccess":{"Purpose":"Verilen rolün gerekli role erişimi olup olmadığını kontrol eder.","Parameters":["role – Kullanıcının rolü.","requiredRole – Erişim için gerekli rol."],"Logic":"Rol hiyerarşisini baz alarak karşılaştırma yapar."},"isAuthorized":{"Purpose":"Verilen endpoint’e erişim iznini kontrol eder.","Parameters":["role – Kullanıcının rolü.","endpoint – İzin kontrolü yapılacak endpoint (String)."],"Logic":"restrictedEndpoints sözlüğüne bakar; yoksa genel erişim verilir."}},"type":"file"},"quotes.dart":{"Purpose":"Denizcilik temalı ilham verici sözleri saklayan ve rastgele bir tane döndüren basit bir yapı.","Class":"Quotes","Properties":{"seaQuotes":"Denizcilik temalı sözlerin tutulduğu sabit liste (String[])."},"Methods":{"getRandomQuote":{"Purpose":"seaQuotes listesinden rastgele bir söz döner.","Implementation":"Random sınıfı kullanılarak random index seçilir ve ilgili söz döndürülür."}},"type":"file"},"permission_gate.dart":{"Purpose":"Flutter widget ağacında erişim kontrolü (RBAC) sağlayan Gate bileşeni.","Class":"PermissionGate","Constructor Parameters":{"permissionCode":"Kontrol edilecek izin kodu.","entityId":"İzin kontrolü yapılacak varlık ID'si.","entityType":"Varlık türü (varsayılan: 'company').","child":"Yetkiliyse render edilecek widget.","wait":"Yükleme sırasında spinner göstermek için flag (default: false)."},"Methods":{"_checkPermission":{"Purpose":"API aracılığıyla kullanıcının ilgili izin koduna erişimi var mı kontrol eder.","Parameters":"BuildContext context","Returns":"true/false"},"check (static)":{"Purpose":"Dışarıdan erişilebilir statik kontrol fonksiyonu.","Parameters":{"context":"BuildContext","permissionCode":"Kontrol edilecek izin kodu.","entityId":"Varlık ID'si.","entityType":"Varlık türü (default: 'company')."},"Returns":"true/false"},"build":{"Purpose":"FutureBuilder ile izin kontrolünü yapar ve widget’ı render eder.","Flow":["Yükleme durumunda spinner veya boşluk gösterilir.","Eğer yetkiliyse: child widget render edilir.","Yetkili değilse: boşluk render edilir."]}},"type":"file"},"menu_items_provider.dart":{"Purpose":"Menü öğelerinin dinamik olarak yüklenmesini ve yönetilmesini sağlayan provider yapısı.","Class":"MenuItemsProvider","Properties":{"_menuItems":"Dinamik menü öğeleri listesi.","_isLoading":"Menü yükleniyor mu? true/false."},"Getters":{"menuItems":"Menü öğeleri listesini döner.","isLoading":"Yüklenme durumunu döner."},"Methods":{"loadDynamicMenuItems":{"Purpose":"API’den menü öğelerini yükler ve durumu günceller.","Flow":["Yükleme durumu true yapılır.","API’den veriler alınır ve _menuItems güncellenir.","Yükleme durumu false yapılır.","Hata oluşursa debugPrint ile loglanır ve false döner."]}},"type":"file"},"manual_cropper.dart":{"Purpose":"Kullanıcının seçtiği resmi manuel olarak kırpmayı ve görüntü üzerinde ölçek/pozisyon ayarlarını sağlayan widget bileşeni.","Classes":{"ManualCropper":{"Purpose":"Kullanıcıdan alınan resmi kırpmak için ana StatefulWidget.","Parameters":{"imageFile":"Kullanıcının seçtiği resim (File).","aspectRatio":"Kırpma oranı (default: 1.0)."}},"_ManualCropperState":{"Purpose":"Kırpma işleminin state’ini yönetir.","Properties":{"_imageFile":"Kullanıcının seçtiği resim dosyası.","_cropRect":"Kırpma alanının Rect olarak tanımı.","_scale":"Resim ölçeği (default: 1.0).","_offset":"Resim kaydırma (pan) offset'i.","_imageDisplaySize":"Ekranda görüntülenen resmin boyutu (Size)."},"Methods":{"initState":"Başlangıçta kırpma alanını ayarlar ve merkezler.","_updateImageDisplaySize":"Resmin ekranda nasıl gösterileceğini hesaplar.","_cropImage":"Seçilen alanı kırpar ve dönen ByteData’yı parent’a iletir.","build":"UI bileşenlerini oluşturur (AppBar, GestureDetector, Slider, Crop bölgesi çizimi)."}},"_CropMaskPainter":{"Purpose":"Kırpma maskesini (overlay) ve crop çerçevesini çizer.","Parameters":{"cropRect":"Kırpılacak alanın dikdörtgen tanımı.","maskColor":"Maske rengi (default: siyah yarı saydam)."},"Methods":{"paint":"Canvas üzerinde crop alanını ve maskeyi çizer.","shouldRepaint":"Her zaman true döner, çünkü her güncellemede yeniden çizim gerekir."}}},"type":"file"},"dynamic_file_provider.dart":{"Purpose":"Dinamik dosya yükleme ve URL yönetimini sağlayan provider yapısı.","Class":"DynamicFileProvider","Properties":{"_fileUrl":"Yüklenen dosyanın URL’si.","_fileLoading":"Dosya yükleniyor mu? (true/false)."},"Getters":{"fileUrl":"Yüklenen dosyanın URL’sini döner.","fileLoading":"Dosya yükleme durumunu döner."},"Methods":{"setFileUrl":{"Purpose":"Yüklenen dosyanın URL’sini ayarlar.","Parameters":{"url":"Dosyanın yeni URL’si (String)."}},"setFileLoading":{"Purpose":"Dosya yükleme durumunu ayarlar.","Parameters":{"value":"Yeni yükleme durumu (bool)."}}},"type":"file"},"color_blindness_provider.dart":{"Purpose":"Renk körlüğü modlarını ve görsel filtreleri yönetir.","Class":"ColorBlindnessProvider","Properties":{"isEffectOn":"Efekt aktif mi? true/false.","currentEffect":"Aktif efekt (ör: blur, none).","blurLevel":"Bulanıklık seviyesi (default: 2.0)."},"Methods":{"toggleEffect":{"Purpose":"Efekt durumunu açık/kapalı olarak değiştirir."},"setBlurLevel":{"Purpose":"Bulanıklık seviyesini günceller.","Parameters":{"level":"Yeni bulanıklık değeri (double)."}},"setEffect":{"Purpose":"Aktif efekti değiştirir.","Parameters":{"effect":"Yeni efekt adı (String)."}},"removeEffect":{"Purpose":"Tüm efektleri kapatır ve none moduna döner."}},"type":"file"},"auth_provider.dart":{"Purpose":"Kullanıcı oturum yönetimi, kimlik doğrulama ve token yenileme işlemlerini merkezi olarak yönetir.","Class":"AuthProvider","Properties":{"_authToken":"Kullanıcı oturum token'ı.","_role":"Kullanıcı rolü (admin, editor, vb.).","_userInfo":"Kullanıcı bilgileri JSON nesnesi.","_isLoadinData":"Yükleme durumu (sabit false)."},"Getters":{"token":"_authToken değerini döner.","isLoggedIn":"Kullanıcı oturumda mı? (token null değilse true).","isLoadingData":"Yükleme durumu.","userInfo":"Kullanıcı bilgileri JSON nesnesi."},"Methods":{"getRole":{"Purpose":"Kullanıcının rolünü RoleProvider'dan alır ve string olarak döner.","Parameters":"BuildContext context"},"generateUUID":{"Purpose":"UUID (benzersiz cihaz kimliği) üretir."},"saveDeviceUUID":{"Purpose":"UUID'yi SecureStorage'a kaydeder ve geri döner."},"login":{"Purpose":"Kullanıcı login olduğunda token ve role değerlerini kaydeder, storage günceller.","Parameters":["BuildContext context","token – Giriş token'ı","role – Kullanıcı rolü"],"Flow":["Token decode edilir ve _userInfo güncellenir.","user_id SecureStorage'a kaydedilir.","authToken ve role SecureStorage'a kaydedilir.","Refresh token varsa SecureStorage'a kaydedilir."]},"logout":{"Purpose":"Kullanıcıyı çıkış yaptırır, SecureStorage ve değişkenleri temizler, AuthPage'e yönlendirir.","Parameters":{"context":"BuildContext","allDevices":"Tüm cihazlardan çıkış yapılsın mı? (default: false)"}},"validateToken":{"Purpose":"Token geçerli mi? Kontrol eder ve gerekirse logout yapar.","Parameters":"BuildContext context"},"refreshUserInfo":{"Purpose":"API'den güncel kullanıcı bilgilerini alır ve günceller."},"_loadUserFromPreferences":{"Purpose":"Uygulama başlarken SecureStorage'tan authToken ve rol bilgisini yükler."},"_decodeToken":{"Purpose":"Token'ı decode edip içeriğini döner.","Parameters":"String token"}},"type":"file"}},"views":{"type":"directory","auth":{"type":"directory","auth_page.dart":{"Purpose":"Uygulama içinde farklı kimlik doğrulama sayfalarını yöneten ana yönlendirme ekranı.","Class":"AuthPage","Enum":{"AuthMode":["login – Giriş ekranı","register – Kayıt ekranı","forgotPassword – Şifre sıfırlama ekranı","none – Geçersiz mod"]},"Properties":{"mode":"AuthPage açıldığında gösterilecek AuthMode."},"build":{"Purpose":"Belirtilen AuthMode’a göre ilgili ekranı render eder.","Flow":["Eğer mode AuthMode.login ise LoginPage gösterilir.","Eğer mode AuthMode.register ise RegisterPage gösterilir.","Eğer mode AuthMode.forgotPassword ise ForgotPassword gösterilir.","Başka bir mode varsa: Scaffold içinde 'Invalid mode!' yazısı gösterilir."]},"type":"file"},"forgot_password.dart":{"Purpose":"Kullanıcının şifresini sıfırlaması için UI ve API entegrasyonu sağlar.","Class":"ForgotPassword","State Variables":{"_formKey":"FormState için GlobalKey.","emailController":"E-posta adresi için TextEditingController.","isLoading":"Şifre sıfırlama isteği gönderilirken loading durumu.","secureStorage":"Güvenli veri saklama yardımcı sınıfı.","randomQuote":"Sayfada gösterilecek denizcilik temalı rastgele söz.","wideScreen":"Geniş ekran kontrolü için flag.","exWidth":"Ekranın genişliği."},"Methods":{"_showEmailResetDialog":{"Purpose":"Şifre sıfırlama e-postası gönderildiğine dair bilgi veren dialog gösterir."},"_handlePasswordReset":{"Purpose":"Form validasyonunu yapar, API'ye reset password isteği gönderir ve dialog açar.","Flow":["Form validasyonu kontrol edilir.","Loading durumu true yapılır.","API çağrısı yapılır (endpoint: reset_password_request).","Başarılı ise dialog açılır.","Hata olursa debugPrint ile loglanır.","Son olarak loading false yapılır."]},"build":{"Purpose":"UI’ı oluşturur, geniş ekran mı kontrol eder ve responsive yapıyı ayarlar.","Widgets":["MyAppBar – Sayfa başlığı.","InsImage – Rastgele deniz resmi gösterir.","Text – Rastgele söz.","CustomFormField – Email alanı.","CustomButton – Şifre sıfırlama isteği butonu."]},"page":{"Purpose":"Email formu ve butonunu render eder (form alanı ve buton).","Parameters":["ThemeProvider themeProvider","List<Map<String, dynamic>> fields","BuildContext context"]}},"type":"file"},"login_page.dart":{"Purpose":"Kullanıcının giriş yapmasını sağlayan ekran. Kimlik doğrulama API entegrasyonu ve UI düzeni içerir.","Class":"LoginPage","State Variables":{"_formKey":"FormState için GlobalKey.","emailController":"Email giriş alanı için TextEditingController.","passwordController":"Şifre giriş alanı için TextEditingController.","isLoading":"Giriş isteği sırasında loading durumu.","secureStorage":"Güvenli veri saklama yardımcı sınıfı.","randomQuote":"Rastgele denizcilik temalı söz.","wideScreen":"Ekranın genişliği 650px’ten büyük mü? true/false.","exWidth":"Ekranın genişliği.","rememberMe":"Kullanıcı 'Beni Hatırla' özelliğini seçti mi?"},"Methods":{"_showEmailVerificationDialog":{"Purpose":"Email onay mesajını kullanıcıya gösterir ve tekrar gönderim sağlar."},"_handleLogin":{"Purpose":"Form validasyonunu yapar, API’ye login isteği gönderir ve başarılıysa kullanıcıyı yönlendirir.","Flow":["Form validasyonu kontrol edilir.","Loading durumu true yapılır.","API’ye POST isteği yapılır (endpoint: login).","Başarılıysa token, refreshToken ve rol SecureStorage’a kaydedilir.","Kullanıcı verified değilse email doğrulama dialog’u gösterilir.","Kullanıcı verified ise anasayfaya yönlendirilir.","Hata olursa debugPrint ile loglanır ve loading false yapılır."]},"build":{"Purpose":"UI’ı oluşturur ve responsive yapıyı ayarlar.","Widgets":["MyAppBar – Başlık çubuğu.","InsImage – Giriş ekranı görseli.","Text – Rastgele söz.","CustomFormField – Email ve şifre alanları.","Checkbox – Beni Hatırla.","CustomButton – Giriş yap butonu."]}},"type":"file"},"register_page.dart":{"Purpose":"Kullanıcının yeni hesap oluşturmasını sağlayan UI ve API entegrasyonunu içerir.","Class":"RegisterPage","State Variables":{"_formKey":"FormState için GlobalKey.","_termsAccepted":"Kullanıcı hizmet şartlarını onayladı mı? true/false.","nameController":"Ad alanı için TextEditingController.","surnameController":"Soyad alanı için TextEditingController.","emailController":"Email alanı için TextEditingController.","passwordController":"Şifre alanı için TextEditingController.","isLoading":"Kayıt isteği sırasında loading durumu.","randomQuote":"Sayfada gösterilecek denizcilik temalı rastgele söz.","wideScreen":"Ekranın genişliği 650px’ten büyük mü? true/false.","exWidth":"Ekranın genişliği."},"Methods":{"_showEmailVerificationDialog":{"Purpose":"Kullanıcıya email doğrulama mesajını gösterir ve yönlendirme sağlar."},"_handleRegister":{"Purpose":"Formu kontrol eder, API'ye register isteği gönderir ve sonucu işleme alır.","Flow":["Form validasyonu kontrol edilir.","Terms & Conditions onayı kontrol edilir.","API'ye POST isteği gönderilir (endpoint: register).","Başarılı ise email doğrulama dialog’u açılır.","Hata oluşursa debugPrint ile loglanır ve loading durumu false yapılır."]},"build":{"Purpose":"UI’ı oluşturur, responsive yapı sağlar.","Widgets":["MyAppBar – Başlık çubuğu.","InsImage – Arka plan görseli.","Text – Rastgele söz.","CustomFormField – Ad, soyad, email ve şifre alanları.","Checkbox – Terms & Conditions onayı.","CustomButton – Kayıt ol butonu."]}},"type":"file"}},"companies":{"type":"directory","compny_type_selector.dart":{"Purpose":"Şirket oluşturma ve güncelleme sırasında kullanılabilecek şirket türlerini seçtiren widget (DropdownSearch kullanır).","Class":"CompanyTypeSelector","Properties":{"initialSelected":"Başlangıçta seçili olacak şirket türlerinin ID listesi (List<int>).","onChanged":"Seçim değiştiğinde tetiklenecek callback fonksiyonu."},"build":{"Purpose":"DropdownSearch widget’ını render eder, API’den şirket türlerini getirir.","Flow":["DropdownSearch açıldığında şirket türlerini çeker ve listeler.","Kullanıcı seçim yaparsa onChanged callback’i çağrılır."]},"type":"file"},"company_detail_page.dart":{"Purpose":"Şirketin tüm detaylarının (iletişim, logo, kullanıcı rolü, türler vb.) yönetildiği ana ekran.","Class":"CompanyShowcasePage","Properties":{"companyData":"Sayfada gösterilecek şirketin verileri (Map<String, dynamic>)."},"State Variables":{"_isLoadingRole":"Kullanıcı rolü yükleniyor mu? true/false.","_contactInfo":"İletişim bilgilerini JSON’dan ayrıştırılmış hali (Map<String, List<Map<String, String>>>).","_userRole":"Kullanıcının bu şirketteki rolü (admin, editor, viewer, vb.).","_allCompanyTypes":"Tüm şirket türleri listesi.","_selectedCompanyTypeIds":"Seçili şirket türü ID’leri."},"Methods":{"initState":{"Purpose":"Sayfa ilk açıldığında veri ve rol yüklemelerini başlatır."},"_fetchCompanyDetails":{"Purpose":"API’den şirket detaylarını getirir ve state’e kaydeder."},"_fetchUserRole":{"Purpose":"Kullanıcının şirketteki rolünü alır."},"_fetchCompanyTypes":{"Purpose":"API’den şirket türleri verilerini çeker (isteğe bağlı tümünü çekebilir)."},"_parseContactInfo":{"Purpose":"JSON formatındaki iletişim bilgilerini Map formatına dönüştürür."},"build":{"Purpose":"Sayfanın ana UI’ını oluşturur ve bilgileri render eder.","Widgets":["CustomScaffold – Sayfa çerçevesi.","OnlineImages – Şirket logosu veya kapak görseli.","DropdownSearch – Şirket türleri seçimi.","CustomFormField – İletişim bilgileri.","CustomImagePicker – Logo yükleme bileşeni.","PermissionGate – Yetki kontrolü (ör. admin mi?)."]}},"Computed Getters":{"isAdmin":"true/false – Kullanıcı admin mi?","isEditor":"true/false – Kullanıcı editor mü?","isViewer":"true/false – Kullanıcı viewer mı?","isFollower":"true/false – Kullanıcı follower mı?","isEmployee":"true/false – Kullanıcı admin/editor/viewer rollerinden birine mi sahip?"},"type":"file"},"company_setting_page.dart":{"Purpose":"Şirket ayarlarının düzenlenebildiği ve yapılandırıldığı sayfa.","Class":"CompanySettingsPage","Properties":{"companyData":"Sayfa içinde kullanılacak şirket verisi (Map<String, dynamic>)."},"State Variables":{"_isLoading":"API istekleri sırasında yükleme durumunu temsil eder (true/false).","_companySettings":"Şirket ayarlarının tutulduğu JSON yapı."},"Methods":{"initState":{"Purpose":"Sayfa yüklendiğinde şirket ayarlarını API’den çeker."},"_fetchCompanySettings":{"Purpose":"API’ye istek atarak şirket ayarlarını getirir ve state’i günceller."},"_updateCompanySettings":{"Purpose":"Kullanıcının yaptığı ayar değişikliklerini API’ye gönderir ve kaydeder."},"build":{"Purpose":"UI’ı oluşturur, form alanları ve kaydet butonları içerir.","Widgets":["CustomScaffold – Sayfa iskeleti ve başlık çubuğu.","CustomFormField – Şirket ayarlarının giriş alanları.","CustomButton – Kaydet butonu."]}},"type":"file"},"compny_list_page.dart":{"Purpose":"Kullanıcının şirketlerini ve tüm şirketleri listeleyen, arama ve pagination destekleyen ana ekran.","Class":"CompanyListPage","State Variables":{"_myExpanded":"Kullanıcı şirketleri paneli açık mı? (true/false)","_allExpanded":"Tüm şirketler paneli açık mı? (true/false)","_myCompanies":"Kullanıcıya ait şirket listesi.","_allCompanies":"Tüm şirketler listesi (pagination destekli).","_page":"Sayfa numarası (pagination için).","_totalCompanies":"Toplam şirket sayısı (API’den alınır).","_orderBy":"Sıralama kolonu (varsayılan: 'created_at').","_orderDirection":"Sıralama yönü (DESC/ASC).","_limit":"Sayfa başına öğe sayısı (25).","_isLoading":"Veri yükleniyor mu? (true/false)","_hasMore":"Daha fazla şirket var mı? (true/false).","_scrollController":"Liste kaydırma kontrolü.","_searchQuery":"Arama sorgusu.","_debounce":"Arama için debounce zamanlayıcısı."},"Methods":{"initState":{"Purpose":"İlk veri yüklemelerini başlatır ve scroll listener ekler."},"_fetchInitialData":{"Purpose":"Kullanıcı ve tüm şirketleri ilk kez çeker."},"_fetchMyCompanies":{"Purpose":"Kullanıcının şirketlerini API’den çeker."},"_fetchAllCompanies":{"Purpose":"Tüm şirketleri API’den çeker (arama ve pagination destekler).","Parameters":{"reset":"Listeyi sıfırla ve baştan yükle? (default: false)"}},"_scrollListener":{"Purpose":"Liste en alta geldiğinde yeni sayfa yüklenmesini tetikler."},"_checkLogin":{"Purpose":"Kullanıcı giriş yapmış mı kontrol eder."},"build":{"Purpose":"UI’ı oluşturur ve liste bölümlerini render eder.","Widgets":["FutureBuilder – Giriş kontrolü ve UI dönüşü.","ExpansionTile – Kullanıcı şirketleri ve tüm şirketler bölümleri.","TextField – Şirket arama kutusu.","ListTile – Şirket kartları ve detay navigasyonu.","CircularProgressIndicator – Yükleme durumu göstergesi."]},"_buildExpansionTitle":{"Purpose":"Panel başlığını (ör: Your Companies) ve sayısını döner."},"_buildCompanyTile":{"Purpose":"Bir şirketi ListTile olarak render eder (logo, ad, oluşturulma tarihi)."},"_buildRoleIcon":{"Purpose":"Kullanıcının şirketteki rolünü simgeleyen icon’u render eder (admin, editor, viewer)."},"_formatNumber":{"Purpose":"Şirket sayısını K gibi kısaltmalarla döner."},"dispose":{"Purpose":"Zamanlayıcı ve controller’ı temizler."}},"type":"file"},"join_company_page.dart":{"Purpose":"Kullanıcının şirkete başvuru yapabilmesini sağlayan ekran.","Class":"JoinCompanyPage","State Variables":{"_formKey":"FormState için GlobalKey.","positionController":"Pozisyon giriş alanı için TextEditingController.","selectedPosition":"Seçili pozisyon (varsa).","isOtherSelected":"Başka bir pozisyon yazılacak mı? true/false.","isLoading":"API isteği sırasında loading durumu.","companyPositions":"API’den gelen şirket pozisyonları listesi (List<Map<String, dynamic>>)."},"Methods":{"initState":{"Purpose":"Sayfa açıldığında API’den şirket pozisyonlarını çeker."},"_fetchCompanyPositions":{"Purpose":"API çağrısı ile şirketin mevcut pozisyonlarını getirir."},"_submitJoinRequest":{"Purpose":"Formu kontrol eder ve şirkete başvuru yapar (endpoint: join_company_request).","Flow":["Form validasyonu yapılır.","API isteği yapılır ve başvuru başarılı olursa Navigator.pop ile geri dönülür.","Başarısız olursa hata mesajı gösterilir."]},"build":{"Purpose":"UI’ı oluşturur: pozisyon seçimi ve başvuru formu.","Widgets":["CustomScaffold – Sayfa başlığı ve çerçevesi.","DropdownSearch – Pozisyon seçimi (API’den gelen liste).","TextField – Diğer pozisyon girişi.","CustomButton – Başvuru gönderme butonu."]}},"type":"file"},"contact_field_definitions.dart":{"Purpose":"İletişim bilgisi alanlarını tanımlayan ve kullanımı kolaylaştıran yardımcı sınıf.","Class":"ContactFieldDefinitions","Methods":{"getDefinitions":{"Purpose":"Tüm desteklenen iletişim alanlarını ve tiplerini (ör: phone, email, address) döner.","Returns":"List<Map<String, dynamic>> – Her bir iletişim alanı için label, hint, icon ve tip içeren liste."}},"type":"file"},"create_new_compny.dart":{"Purpose":"Yeni bir şirket oluşturmak için UI ve API entegrasyonu sağlar.","Class":"CreateCompanyPage","State Variables":{"_companyLogo":"Yüklenecek şirket logosu (File).","_nameController":"Şirket adı TextEditingController.","_emailController":"Şirket email TextEditingController.","_rankController":"Kullanıcının rolü için TextEditingController.","_isLoading":"API isteği sırasında loading durumu (true/false).","_error":"Oluşan hata mesajı."},"Methods":{"_submitCompany":{"Purpose":"Formu kontrol eder ve API'ye şirket oluşturma isteği gönderir.","Flow":["Alanlar kontrol edilir (boşsa hata).","Email formatı kontrol edilir.","API'ye create_company isteği gönderilir.","Başarılı ise companyId alınır ve kullanıcı admin olarak eklenir.","Logo yüklemesi (varsa) upload_image_general endpoint'ine gönderilir.","Başarısızsa hata mesajı döner.","Başarılı ise CompanyListPage’e yönlendirilir."]},"build":{"Purpose":"UI’ı oluşturur ve form alanlarını render eder.","Widgets":["CustomScaffold – Sayfa başlığı ve layout’u.","CustomImagePicker – Logo seçici.","TextField – Şirket adı, email ve pozisyon (rank) alanları.","ElevatedButton – Şirket oluştur butonu."]},"_buildLogoPicker":{"Purpose":"Şirket logosu seçimi için ImagePicker bileşeni render eder."},"_buildTextField":{"Purpose":"Basit bir TextField oluşturur (label ve controller parametreleriyle).","Parameters":["TextEditingController controller","String label"]}},"type":"file"},"edit_user_permissions_page.dart":{"Purpose":"Belirli bir kullanıcının şirket izinlerini düzenlemeye yarayan sayfa.","Class":"EditUserPermissionsPage","Properties":{"companyId":"İzinlerin düzenleneceği şirket ID’si.","userData":"Düzenlenecek kullanıcının verileri."},"State Variables":{"isLoading":"API isteği sırasında loading durumu (true/false).","userPermissions":"Kullanıcının mevcut izinleri.","allPermissions":"Tüm izin listesi (API’den gelir).","userRole":"Kullanıcının rolü (ör: admin, editor)."},"Methods":{"_togglePermission":{"Purpose":"Bir izin kodunu ekler/çıkarır (toggle eder).","Parameters":{"permissionCode":"Seçili izin kodu (String)."}},"_savePermissions":{"Purpose":"Seçili izinleri API’ye gönderir ve kaydeder.","Flow":["Kullanıcının id, companyId ve seçili izin listesi gönderilir.","Başarılıysa sayfayı kapatır (Navigator.pop)."]},"_buildUserHeader":{"Purpose":"Kullanıcı adı ve e-posta bilgilerini başlıkta gösterir."},"build":{"Purpose":"Ana UI’ı oluşturur ve izinleri listeleyen CheckboxListTile widget’larını render eder.","Widgets":["CustomScaffold – Sayfa başlığı ve iskeleti.","ListView – İzin listesi (CheckboxListTile ile).","ElevatedButton – Seçili izinleri kaydet butonu."],"Permissions Check":["isSelf – Kullanıcı kendi profilini düzenliyor mu? true/false.","isAdmin – Düzenleyen kullanıcı admin mi? true/false.","canEdit – İzinlerin düzenlenip düzenlenemeyeceği (admin veya kendisi değilse)."]}},"type":"file"},"manage_companies.dart":{"Purpose":"Kullanıcının kendi şirketlerini yönetebileceği, yeni şirket oluşturabileceği ekran.","Class":"ManageCompanyPage","build":{"Purpose":"Sayfa UI’ını oluşturur.","Widgets":["CustomScaffold – Sayfa iskeleti ve başlık çubuğu.","ElevatedButton.icon – Yeni şirket oluşturma butonu (Navigator.pushNamed ile /create_company’e yönlendirir).","SizedBox – Dikey boşluk ayarı.","Text – 'My Companies (List will be here.)' başlıklı bilgi metni."]},"type":"file"},"manage_company_users.dart":{"Purpose":"Belirli bir şirketin kullanıcılarını yönetmek ve yetkilerini düzenlemek için kullanılan ekran.","Class":"ManageCompanyUsersPage","Properties":{"companyData":"Sayfa içinde kullanılacak şirket verisi (Map<String, dynamic>)."},"State Variables":{"_users":"Şirkete ait kullanıcılar listesi (API’den gelir).","_searchQuery":"Arama kutusundaki sorgu metni.","_isLoading":"API isteği sırasında yükleme durumu (true/false)."},"Methods":{"initState":{"Purpose":"Sayfa açıldığında API’den kullanıcı verilerini çeker."},"_fetchCompanyUsers":{"Purpose":"API çağrısı ile şirket kullanıcılarını getirir."},"_searchUsers":{"Purpose":"Arama kutusuna göre kullanıcıları filtreler."},"build":{"Purpose":"UI’ı oluşturur ve kullanıcı listesi ile yetkilendirme bileşenlerini render eder.","Widgets":["CustomScaffold – Sayfa başlığı ve iskeleti.","TextField – Kullanıcı arama kutusu.","ListView – Kullanıcı listesi (her satırda kullanıcı adı, rolü ve izin düzenleme butonu).","IconButton – İzin düzenleme sayfasına yönlendirir (edit_user_permissions_page.dart)."]}},"type":"file"},"update_company_page.dart":{"Purpose":"Varolan bir şirketi güncellemek için tasarlanmış ekran (şu an için placeholder olarak hazırlanmış).","Class":"UpdateCompanyPage","Properties":{"companyData":"Güncellenecek şirket verisi (Map<String, dynamic>)."},"build":{"Purpose":"Placeholder olarak Scaffold widget’ı içinde 'UpdateCompanyPage (to be implemented)' metnini gösterir."},"type":"file"}},"user_settings":{"type":"directory","cv_popup_editor.dart":{"Purpose":"Kullanıcının CV’sini düzenlemesi için modal bir popup editör bileşeni sağlar.","Class":"CVPopupEditor","Constructor Parameters":{"title":"Başlık metni.","initialText":"Başlangıç metni (opsiyonel).","saveButton":"Kaydet butonunu göster (default: true).","initialCV":"Başlangıçta yüklenecek CV verisi (opsiyonel).","type":"Düzenleme türü (ör. default, education, work_experience, reference).","onSubmit":"Veri kaydedildiğinde çağrılacak callback fonksiyonu."},"State Variables":{"_editorKey":"Metin editörü için global key.","_educationFormKey":"Eğitim form bölümü için global key.","_workFormKey":"İş tecrübesi form bölümü için global key.","_referenceFormKey":"Referans form bölümü için global key.","content":"Editördeki JSON Delta metni.","contactData":"İletişim verileri (Map formatında).","pendingData":"Kaydedilmeyi bekleyen veriler."},"Methods":{"initState":{"Purpose":"Başlangıçta metin verisini content’e yükler."},"_handleSubmit":{"Purpose":"Kaydet butonu ile verileri API’ye gönderir ve günceller.","Flow":["type parametresine göre (ör. default, basic_info, professional_title, education, work_experience) güncelleme yapılır.","Veri education ise _educationFormKey’den, work_experience ise _workFormKey’den alınır ve API’ye gönderilir.","Başarılı yanıt gelirse callback onSubmit çağrılır ve modal kapanır.","Başarısızsa hata mesajı gösterilir."]},"build":{"Purpose":"Popup modal UI’ını oluşturur.","Widgets":["Scaffold – Popup editörün ana container’ı.","CustomTextEditor – JSON Delta tabanlı metin editörü.","Form alanları – Eğitim, iş tecrübesi veya referans formu gibi dinamik bölümler.","ElevatedButton – Kaydet butonu."]}},"type":"file"},"cv_language_settings.dart":{"Purpose":"Kullanıcının CV’sinde dil bilgilerini dinamik olarak ekleyip düzenleyebileceği form bileşeni.","Classes":{"LanguageItem":{"Purpose":"Bir dil bilgisini temsil eden sınıf.","Properties":{"name":"Dil adı (String).","percentage":"Yüzdelik oran (double).","pathName":"Varsayılan olarak 'Language' (String)."},"Methods":{"toJson":"Dil bilgisini JSON formatına çevirir.","fromJson":"JSON verisinden dil nesnesi oluşturur."}},"LanguageFormSection":{"Purpose":"Kullanıcının birden çok dil bilgisini yönetebileceği dinamik form bileşeni.","Constructor Parameters":{"initialItems":"Başlangıçta gösterilecek dil listesi.","onChanged":"Değişiklik olduğunda çağrılacak callback fonksiyonu (opsiyonel)."},"State Variables":{"_items":"Dil bilgisini tutan liste (List<LanguageItem>)."},"Methods":{"initState":"Başlangıçta mevcut dil bilgilerini yükler.","_addItem":"Yeni bir dil alanı ekler.","_removeItem":"Verilen index’teki dili listeden kaldırır.","build":{"Purpose":"UI’ı oluşturur ve dil giriş alanlarını render eder.","Widgets":["Card – Dil alanı düzenleme kutusu.","TextFormField – Dil adı alanı.","Slider – Dil yüzdelik oranı.","IconButton – Silme butonu.","ElevatedButton.icon – Yeni dil ekleme butonu."]}}}},"type":"file"},"cv_education_setting.dart":{"Purpose":"Kullanıcının CV’sine eğitim bilgilerini eklemesini ve düzenlemesini sağlayan bileşen.","Class":"CVEducationSettings","State Variables":{"educationList":"Eğitim geçmişini içeren dinamik liste (List<Map<String, dynamic>>).","isLoading":"API isteği sırasında yükleme durumu (true/false)."},"Methods":{"initState":{"Purpose":"Başlangıçta API’den eğitim geçmişini getirir ve state’e kaydeder."},"_loadEducationData":{"Purpose":"API’den eğitim bilgilerini getirir ve listeyi günceller."},"_saveEducationData":{"Purpose":"Kullanıcının düzenlediği eğitim bilgilerini API’ye kaydeder."},"build":{"Purpose":"UI’ı oluşturur ve eğitim bilgisi kartlarını render eder.","Widgets":["CustomScaffold – Sayfa iskeleti ve başlığı.","ListView – Eğitim geçmişi bilgilerini listeler.","TextField – Eğitim başlığı, okul adı, süre gibi alanlar.","ElevatedButton – Yeni eğitim ekleme ve kaydetme butonu."]}},"type":"file"},"contact_form_section_cv.dart":{"Purpose":"Kullanıcının CV’sindeki iletişim bilgilerini yönetebileceği form bölümü.","Class":"ContactFormSection","Properties":{"initialCV":"Başlangıçtaki CV verisi.","isDark":"Karanlık modda mı çalışıyor? true/false.","onChanged":"Değişiklik durumunda çağrılacak callback fonksiyonu.","initialCountryId":"Başlangıçtaki ülke ID’si.","initialCityId":"Başlangıçtaki şehir ID’si.","initialAddress":"Başlangıçtaki adres bilgisi.","initialPhones":"Başlangıçtaki telefon listesi.","initialEmails":"Başlangıçtaki e-posta listesi.","initialSocials":"Başlangıçtaki sosyal medya bilgileri."},"State Variables":{"_countryController":"Ülke alanı için TextEditingController.","_cityController":"Şehir alanı için TextEditingController.","_addressController":"Adres alanı için TextEditingController.","phoneControllers":"Telefon numarası alanları için TextEditingController listesi.","emailControllers":"E-posta adresi alanları için TextEditingController listesi.","socialControllers":"Sosyal medya alanları için TextEditingController listesi.","_emailController":"Tekil e-posta alanı (varsa)."},"Methods":{"dispose":{"Purpose":"Tüm controller’ları ve state’i temizler."},"_notifyChange":{"Purpose":"Form verilerini toplar ve onChanged callback’ini çağırır."},"initState":{"Purpose":"Sayfa yüklendiğinde başlangıç verilerini yükler."},"loadInitialData":{"Purpose":"Başlangıç verilerini API’den ya da widget’lardan alır ve alanlara yerleştirir."},"build":{"Purpose":"Form bileşenlerini ve UI’ı oluşturur.","Widgets":["TextField – Ülke, şehir, adres, e-posta, telefon, sosyal medya gibi alanlar.","Column, Padding – Genel düzenleme ve yerleşim ayarları."]}},"type":"file"},"edit_cv_page.dart":{"Purpose":"Kullanıcının CV’sini düzenlemesini ve görüntülemesini sağlayan ana ekran.","Class":"EditCVPage","State Variables":{"userData":"API’den gelen kullanıcı verileri ve CV bilgileri."},"Methods":{"initState":{"Purpose":"Sayfa açıldığında kullanıcı verilerini yükler."},"loadUserData":{"Purpose":"API’den kullanıcı bilgilerini getirir (get_user_info endpoint)."},"getUserInfo":{"Purpose":"loadUserData metodunu çağırır ve sonucu userData değişkenine kaydeder."},"fetchCVPageData":{"Purpose":"API’den CV verilerini çeker (get_user_cvs endpoint).","Flow":["Kullanıcının ID’si get_user_info endpoint’inden alınır.","Sonra get_user_cvs endpoint’ine istek atılır ve CV verisi alınır."]},"sectionBox":{"Purpose":"Başlık ve içeriği olan bir kutu render eder.","Parameters":{"title":"Bölüm başlığı (String).","child":"İçerik Widget’ı.","trailing":"Opsiyonel trailing widget (ikon vb.).","isDark":"Dark mode desteği (bool)."}},"extractPlainText":{"Purpose":"JSON Delta verisini Quill aracılığıyla düz metin olarak render eder.","Parameters":{"jsonDelta":"Quill Delta formatındaki metin (String)."}},"build":{"Purpose":"Ana UI’ı FutureBuilder ile oluşturur ve CV bölümlerini render eder.","Widgets":["Scaffold – Sayfa iskeleti ve layout’u.","FutureBuilder – API’den verileri yükler ve render eder.","CustomScaffold, TextWithIcons, ListView, SizedBox – CV bölümlerini oluşturur."]}},"type":"file"},"cv_work_experience_settings.dart":{"Purpose":"Kullanıcının CV’sinde iş tecrübelerini (gemi/ofis) listeleyip düzenleyebileceği bir form bölümü sağlar.","Class":"CVWorkExperienceSettings","State Variables":{"_formKey":"FormState için GlobalKey.","experiences":"İş tecrübelerini içeren dinamik liste (List<Map<String, dynamic>>).","isLoading":"API isteği sırasında yükleme durumu."},"Methods":{"initState":{"Purpose":"Sayfa açıldığında API’den mevcut iş tecrübelerini getirir."},"_loadWorkExperiences":{"Purpose":"API’den iş tecrübelerini alır ve listeyi günceller."},"_saveWorkExperiences":{"Purpose":"Kullanıcının düzenlediği iş tecrübelerini API’ye kaydeder."},"build":{"Purpose":"UI’ı oluşturur ve iş tecrübesi kartlarını render eder.","Widgets":["CustomScaffold – Sayfa iskeleti ve başlığı.","ListView – İş tecrübelerini listeleyen bileşenler.","TextField – Pozisyon, şirket, süre vb. bilgileri düzenlemek için alanlar.","ElevatedButton – Yeni iş tecrübesi ekleme ve kaydetme butonu."]}},"type":"file"},"cv_referance_setting.dart":{"Purpose":"Kullanıcının CV’sine referans ekleyip düzenleyebileceği form bileşeni.","Class":"CVReferanceSetting","State Variables":{"_formKey":"FormState için GlobalKey.","referenceController":"Referans metni için TextEditingController.","references":"Kullanıcının mevcut referansları (List<String>).","isLoading":"API isteği sırasında yükleme durumu."},"Methods":{"initState":{"Purpose":"Başlangıçta mevcut referansları API’den çeker."},"_loadReferences":{"Purpose":"API’den kullanıcıya ait referansları alır ve state’e kaydeder."},"_saveReferences":{"Purpose":"Güncellenen referansları API’ye kaydeder."},"build":{"Purpose":"UI’ı oluşturur ve referans giriş alanını ve kaydetme butonunu render eder.","Widgets":["CustomScaffold – Sayfa iskeleti ve başlığı.","ListView – Referans giriş alanları ve kaydetme butonu.","TextField – Yeni referans ekleme alanı.","ElevatedButton – Kaydet butonu."]}},"type":"file"},"privacy_settings_page.dart":{"Purpose":"Kullanıcının gizlilik ve güvenlik ayarlarını yönetmesini sağlayan ekran (şifre değiştirme gibi).","Class":"PrivacySettings","State Variables":{"_currentPasswordController":"Mevcut şifre alanı için TextEditingController.","_newPasswordController":"Yeni şifre alanı için TextEditingController.","_confirmPasswordController":"Yeni şifre onayı için TextEditingController."},"Methods":{"build":{"Purpose":"Ana UI’ı oluşturur ve kullanıcının gizlilik ayarlarını ve şifre değiştirme formunu render eder.","Widgets":["BackdropFilter – Arka plan bulanıklık efekti.","Column – Gizlilik özellikleri ve şifre değiştirme formu.","Text – Başlık ve açıklama metinleri.","Switch – (Gelecekteki) gizlilik ayarlarının inaktif toggle’ları.","TextFormField – Şifre giriş alanları (Mevcut, Yeni, Yeni Onay).","ElevatedButton.icon – Şifreyi değiştirmek için buton."]}},"type":"file"},"notificationforms.dart":{"Purpose":"Kullanıcının e-posta ve uygulama bildirim ayarlarını yönetmesini sağlayan ekran.","Class":"NotificationsForm","State Variables":{"_emailNotifications":"E-posta bildirimleri açık mı? true/false.","_appNotifications":"Uygulama içi bildirimler açık mı? true/false.","_weeklySummary":"Haftalık özet özelliği açık mı? true/false.","_isLoading":"Ayarlar yükleniyor mu? true/false."},"Methods":{"initState":{"Purpose":"Sayfa açıldığında API’den bildirim ayarlarını çeker."},"_loadNotificationSettings":{"Purpose":"API çağrısı yaparak mevcut ayarları getirir ve state günceller.","Flow":["API’den get_notification_settings endpoint’i çağrılır.","Veriler parse edilerek state’e kaydedilir.","Hata olursa loglanır."]},"_saveNotificationSettings":{"Purpose":"Kullanıcı tarafından yapılan ayarları API’ye kaydeder.","Flow":["API’ye save_notification_settings endpoint’i ile gönderilir.","Başarılı ise kullanıcıya Snackbar gösterilir.","Başarısızsa hata mesajı loglanır ve Snackbar’da gösterilir."]},"build":{"Purpose":"UI’ı oluşturur ve ayar bileşenlerini render eder.","Widgets":["BackdropFilter – Blur efekti verir.","SwitchListTile – Bildirim ayarlarının toggle bileşenleri (e-posta, uygulama, haftalık özet).","ElevatedButton.icon – Ayarları kaydet butonu."]},"_buildGlassSwitchTile":{"Purpose":"Her bir bildirim ayarı için özel SwitchListTile oluşturan yardımcı metod.","Parameters":{"title":"Başlık metni (ör. 'Email Notifications').","value":"Açık mı? true/false.","onChanged":"Değişiklik callback’i."}}},"type":"file"},"language_settings.dart":{"Purpose":"Kullanıcının uygulama dil ayarlarını görüntüleyebileceği basit UI ekranı.","Class":"LanguageSettings","build":{"Purpose":"Blur efekti, dil ayarı bilgisi ve dekoratif UI bileşenlerini oluşturur.","Widgets":["Center – Ana hizalama.","Padding – İçerik için kenar boşlukları.","ClipRRect – Köşeleri yuvarlatılmış maskeler.","BackdropFilter – Blur efekti uygular.","Container – Arka plan renk ve kenarlık.","Icon – Dil ayar simgesi.","Text – Başlık ('Language Settings') ve bilgi metni ('Only English language is currently supported.')"]},"type":"file"},"expertice_form_section_cv.dart":{"Purpose":"Kullanıcının uzmanlık alanlarını dinamik şekilde ekleyebileceği ve düzenleyebileceği bir form bileşeni.","Classes":{"ExpertiseItem":{"Purpose":"Tek bir uzmanlık öğesini temsil eder (ad, yüzdelik oran).","Properties":["name – Uzmanlık alanı adı.","percentage – Yüzdelik oran (double).","pathName – Varsayılan: 'Expertise' (kullanım amacına göre)."],"Methods":["toJson – JSON formatına çevirir.","fromJson – JSON’dan nesne oluşturur."]},"ExpertiseFormSection":{"Purpose":"Birden çok ExpertiseItem’ın düzenlenebileceği ve dinamik şekilde eklenip silinebileceği form bölümü.","Constructor Parameters":{"initialItems":"Başlangıçta gösterilecek uzmanlık alanları listesi.","onChanged":"Değişiklik olduğunda çağrılacak callback fonksiyonu."},"State Variables":{"_items":"Düzenlenen uzmanlık alanları listesi (List<ExpertiseItem>)."},"Methods":{"initState":"Başlangıçta mevcut öğeleri yükler.","_addItem":"Yeni uzmanlık öğesi ekler.","_removeItem":"Belirtilen index’teki uzmanlık öğesini siler.","build":{"Purpose":"UI’ı oluşturur: Uzmanlık formu alanları ve 'Add' butonu.","Widgets":["Card – Uzmanlık öğesi düzenleme alanı.","TextFormField – Uzmanlık adı girişi.","Slider – Yüzdelik oran seçimi.","IconButton – Silme butonu.","ElevatedButton – Yeni uzmanlık ekleme butonu."]}}}},"type":"file"},"settings_page.dart":{"Purpose":"Kullanıcının profil ayarlarını ve genel ayarları (bildirim, dil, gizlilik, çıkış) yönetebileceği ekran.","Class":"SettingsPage","State Variables":{"_tabController":"Tab ve NavigationRail kontrolü için TabController.","menuLabels":"Ayar sayfası sekmelerinin etiket listesi.","menuIcons":"Ayar sekmelerinin icon listesi.","contentWidgets":"Her sekmenin karşılığı olan Widget listesi."},"Methods":{"initState":{"Purpose":"TabController’ı başlatır ve NavigationRail dinleyicisini kurar."},"dispose":{"Purpose":"TabController’ı dispose eder (kaynakları temizler)."},"build":{"Purpose":"Ekranın genişliğine göre NavigationRail veya TabBarView layout’u render eder.","Widgets":["CustomScaffold – Sayfa başlığı ve ana layout.","NavigationRail – Geniş ekranda dikey menü (Profile, Notifications, Language, Privacy, Logout).","TabBar – Mobil/dar ekran için yatay sekmeler.","TabBarView – Her sekmeye karşılık gelen içerik Widget’ları."]},"buildNavigationRailLayout":{"Purpose":"Geniş ekran NavigationRail layout’unu oluşturur.","Parameters":{"screenWidth":"Cihaz ekran genişliği."}},"buildTabBarLayout":{"Purpose":"Mobil/dar ekran için TabBar layout’unu oluşturur."}},"Widgets":["ProfilePage – Profil sekmesi içeriği.","NotificationsForm – Bildirim ayarları.","LanguageSettings – Dil ayarları.","PrivacySettings – Gizlilik ayarları.","LogoutScreen – Çıkış sekmesi (uygulamadan çıkış işlemi)."],"type":"file"},"profilepage_configs.dart":{"Purpose":"Profil sayfasındaki sekmeleri ve başlık yapılandırmalarını merkezi olarak tanımlar.","Class":"ProfilePageConfigs","Properties":{"tabLabels":"Sekmelerin başlık etiketleri (General, Contact, Certificates).","tabIcons":"Sekme başlıkları için kullanılacak icon listesi."},"Methods":{"getTabLabel":{"Purpose":"Belirli bir index’e göre sekme başlığını döner.","Parameters":{"index":"Sekme index değeri (int)."}},"getTabIcon":{"Purpose":"Belirli bir index’e göre icon’u döner.","Parameters":{"index":"Sekme index değeri (int)."}}},"type":"file"},"profile_page.dart":{"Purpose":"Kullanıcının profil sayfasını oluşturan ana ekran.","Class":"ProfilePage","Properties":{"userId":"Görüntülenecek kullanıcı ID'si (int)."},"build":{"Purpose":"Sayfa UI'ını oluşturur, kullanıcının bilgilerini ve sekmeleri yükler.","Widgets":["CustomScaffold – Sayfa ana çerçevesi ve başlık barı.","TabBar – 'General', 'Contact', 'Certificates' sekmeleri.","TabBarView – Her sekmenin ilgili bileşenini render eder (ProfileGeneralTab, ContactInformationTab, CertificatesTab)."]},"type":"file"},"profile_general_tab.dart":{"Purpose":"Kullanıcının genel profil bilgilerini (ad, soyad, e-posta, biyografi) görüntüleme ve güncelleme ekranı.","Class":"ProfileGeneralTab","State Variables":{"_nameController":"Ad alanı için TextEditingController.","_surnameController":"Soyad alanı için TextEditingController.","_emailController":"E-posta alanı için TextEditingController.","_bioController":"Biyografi alanı için TextEditingController.","infoData":"Kullanıcı bilgilerini tutan JSON veri yapısı (Map<String, dynamic>).","isUpdating":"Güncelleme sırasında loading durumunu belirtir (true/false)."},"Methods":{"initState":{"Purpose":"Sayfa yüklendiğinde kullanıcı verilerini çeker."},"fetchUserData":{"Purpose":"API’den kullanıcı bilgilerini getirir ve alanları doldurur."},"updateUserData":{"Purpose":"Kullanıcının genel bilgilerini API’ye göndererek günceller."},"_onImagePicked":{"Purpose":"Kullanıcı profil veya kapak fotoğrafı seçtiğinde API’ye yükleme yapar.","Parameters":{"file":"Yüklenecek dosya (File).","base64":"Dosyanın base64 hali (opsiyonel).","type":"Yüklenecek görselin türü ('cover' veya 'profile')."}},"build":{"Purpose":"Sayfanın UI’ını oluşturur ve genel bilgileri gösterir.","Widgets":["SingleChildScrollView – Tüm içerik kaydırılabilir yapı.","CustomFormField – Ad, soyad, e-posta ve biyografi alanları.","CustomImagePicker – Profil ve kapak görseli seçici.","ElevatedButton – Profil güncelleme butonu."]}},"type":"file"}},"admin_dashboard.dart":{"Purpose":"Admin paneli için ana kontrol paneli ekranı.","Class":"AdminDashboard","build":{"Purpose":"Dashboard’u oluşturur ve ekranı Widget’larla doldurur.","Widgets":["Text – Hoş geldiniz mesajı (görselde başlık olarak).","ElevatedButton – Admin özel işlemleri için butonlar.","Diğer admin bileşenleri ve istatistik bölümleri (geliştirmeye açık)."]},"type":"file"},"first_page.dart":{"Purpose":"Ana giriş sayfası (Dashboard görünümü) – Responsive tasarımla grid/list yapısı.","Class":"FirstPage","build":{"Purpose":"Ekranın genişliğine göre responsive yapıyı render eder.","Widgets":["CustomScaffold – Başlık ve ana layout kapsayıcısı.","Row – Geniş ekranda 3 sütun (sol: modüller, orta: modül grid, sağ: kısayol panelleri).","ListView – Küçük ekranda dikey liste yapısı.","_buildCard – Kart tarzı modül butonları (sol panelde ve sağ panelde).","_buildModuleBox – Orta panelde modülleri buton tarzında grid olarak render eder."]},"Helper Methods":{"_buildModuleBox":{"Purpose":"Bir modül kutusunu grid içinde oluşturur (ikon + başlık).","Parameters":{"context":"BuildContext","icon":"Modül ikonu (IconData).","title":"Modül başlığı (String)."}},"_buildCard":{"Purpose":"Sol ve sağ panellerde kart görünümü için oluşturur.","Parameters":{"context":"BuildContext","icon":"Kart ikonu (IconData).","title":"Kart başlığı (String)."}}},"type":"file"},"home_page.dart":{"Purpose":"Ana gösterge paneli (Dashboard) – farklı layout modları ve renk uyarlamalarıyla modern bir tasarım sunar.","Class":"HomePage","State Variables":{"_layoutMode":"0: Grid, 1: Text List, 2: Button List – kullanıcı tercihi için mod değişimi.","_infoScrollController":"Bilgi paneli kaydırması için scroll controller."},"initState":{"Purpose":"Sayfa açıldığında bilgi panelini otomatik olarak kaydırır ve sonra geri çeker."},"Methods":{"_animateInfoScroll":{"Purpose":"Bilgi panelini otomatik kaydırıp, sonra başa sarar."},"build":{"Purpose":"Ana UI’ı oluşturur. Tema ve renk ayarlarını ThemeProvider’dan alır.","Widgets":["CustomScaffold – Dashboard başlığı ve ana yapı.","Column – Üst kısımda info bölümü ve alt kısımda layout mode’a göre widget’lar.","LayoutBuilder – Ekran genişliğine göre grid/text/button list modunu seçer.","ListView – Text List veya Button List modlarında listeleri oluşturur.","SingleChildScrollView – Grid modunda modülleri düzenler."]}},"Design":{"Theme Adaptation":"Light/Dark modda renk ayarları (kart rengi, border, textColor, vb.).","Glassmorphism":"Cam efekti (blur ve saydam renkler)."},"type":"file"},"public_profile_page.dart":{"Purpose":"Kullanıcının herkese açık profil sayfasını görüntüler.","Class":"PublicProfilePage","Properties":{"userId":"Profil bilgisi çekilecek kullanıcı ID'si."},"build":{"Purpose":"FutureBuilder ile kullanıcının profil verisini çeker ve render eder.","Flow":["API'den get_user_info endpoint'i çağrılır (apiManager.post).","Eğer veri çekilirken bekleme durumu varsa loading göstergesi gösterilir.","Veri çekilirse: kullanıcı resmi, adı, soyadı, kapak fotoğrafı ve diğer bilgiler render edilir.","Kullanıcı kendi profilini mi görüntülüyor kontrol edilir (isOwnProfile).","Kendi profilini görüntülüyorsa 'My Profile' başlığı, değilse 'User Profile' başlığı gösterilir.","Veri eksik ya da yoksa hata mesajı gösterilir."]},"Widgets":["CustomScaffold – Sayfa genel layout’u.","FadeInImage – Kapak fotoğrafı (cover image).","BackdropFilter – Kapak fotoğrafı üzerinde bulanıklık efekti.","CircleAvatar – Kullanıcı profil fotoğrafı.","Text – Kullanıcı adı ve soyadı."],"type":"file"},"terms.dart":{"Purpose":"SeaOfSea platformu için 'Terms and Conditions' sayfası.","Class":"Terms","State Variables":{"_menuItems":"Başlıklar ve alt başlıklarla birlikte tüm metin içeriklerini tutan Map<String, Map<String, String>>.","_selectedTitle":"Şu anda seçili olan menü başlığı (varsayılan: 'Terms and Conditions')."},"build":{"Purpose":"Ana UI’ı oluşturur. NavigationRail menüsü ve içerik bölmesini render eder.","Widgets":["MyAppBar – Üstteki başlık barı.","NavigationRail – Sol menüde başlık listesi.","VerticalDivider – Menü ile içerik arasında dikey ayraç.","Expanded + Column – Seçilen başlığa ait alt başlık ve içerikleri listeler.","ListView – Alt başlık ve içerikleri kaydırılabilir listede gösterir.","Text – Başlık ve alt başlık metinleri."],"Flow":["Kullanıcı NavigationRail ile başlık seçer.","Seçilen başlık Column içinde genişletilmiş şekilde gösterilir.","Alt başlık ve içerikler ListView ile listelenir."]},"type":"file"}},"widgets":{"type":"directory","show_dialog.dart":{"Purpose":"Özelleştirilmiş dialog (alert) göstermek için yardımcı sınıf.","Class":"ShowDialog","Methods":{"showCustomDialog":{"Purpose":"Basit bir AlertDialog gösterir.","Parameters":{"context":"BuildContext, dialogun gösterileceği yer.","title":"Dialog başlığı (String).","content":"Dialog içeriği metni (String).","actions":"Dialog altında gösterilecek butonlar (List<Widget>, opsiyonel).","barrierDismissible":"Dialog dışına tıklanarak kapatılabilir mi? (bool, varsayılan true)."},"Behavior":["Dialog açılır ve verilen başlık, içerik ve butonlar gösterilir.","Eğer actions verilmezse, varsayılan olarak sadece 'OK' butonu gösterilir.","'OK' butonuna basıldığında dialog kapanır."]}},"type":"file"},"online_images.dart":{"Purpose":"Uzak sunuculardan gelen görselleri göstermek için özelleştirilmiş widget.","Class":"OnlineImage","Constructor Parameters":{"imagePath":"Görselin klasör yolu (String).","imageName":"Gösterilecek görselin dosya adı (String).","sizeW":"Görselin genişliği (double).","sizeH":"Görselin yüksekliği (double, opsiyonel).","rounded":"Görselin köşeleri yuvarlatılsın mı? (bool, opsiyonel).","border":"Görsel çevresinde border olsun mu? (bool, opsiyonel).","onTap":"Görsele tıklanınca çağrılacak fonksiyon (opsiyonel)."},"State Variables":{"loading":"Görsel yüklenirken gösterilen loading durumu.","error":"Yükleme hatası durumu."},"Methods":{"build":{"Purpose":"Görseli network üzerinden yükler, loading ve hata durumlarını yönetir.","Widgets":["ClipRRect – Yuvarlatılmış köşeler için.","Container – Boyut ve stil için.","Image.network – Uzaktaki görseli yükler.","CircularProgressIndicator – Yüklenirken gösterilir.","Icon – Yükleme hatası varsa gösterilir."]}},"type":"file"},"custom_image_picker.dart":{"Purpose":"Kullanıcının profil veya kapak görseli yükleyip kırpabileceği özelleştirilmiş bileşen.","Class":"CustomImagePicker","Constructor Parameters":{"aspectRatio":"Görsel kırpma oranı (double).","onImagePicked":"Seçilen dosya ve base64 verisini geri döndüren callback fonksiyonu.","meta":"Meta verileri (Map).","iwidth":"Görsel genişliği (double).","iheight":"Görsel yüksekliği (double).","iradius":"Görsel kenar yuvarlatma oranı (double).","ishadow":"Gölge efekti (bool).","existingImageUrl":"Mevcut görsel URL'si (String, opsiyonel).","canEdit":"Görsel düzenleme izni (bool, default: true).","doUpload":"Görsel yükleme API çağrısı yapılsın mı? (bool).","uploadEndpoint":"Yükleme yapılacak endpoint (String, opsiyonel).","uploadMeta":"Yükleme sırasında gönderilecek ek meta veriler (Map, opsiyonel).","onUploaded":"Başarılı yükleme sonrası callback fonksiyonu (opsiyonel)."},"State Variables":{"_selectedImage":"Seçilen dosya (File).","_selectedImageBytes":"Web için seçilen görsel byte verisi (Uint8List, opsiyonel).","_cropController":"Kırpma işlemini kontrol eden CropController."},"Methods":{"initState":{"Purpose":"Başlangıçta kırpma kontrolörü başlatılır."},"_pickAndCropImage":{"Purpose":"Kullanıcının görsel seçmesi ve kırpması için modal dialog açar.","Flow":["ImagePicker ile görsel seçimi yapılır.","CropImage widget’ı ile kullanıcı kırpma yapar.","Kırpılan görsel base64 formatında hazırlanır ve onImagePicked callback’ine gönderilir.","Eğer doUpload true ise API’ye yükleme yapılır ve onUploaded callback’i çağrılır."]},"build":{"Purpose":"Görsel picker ve mevcut görseli gösteren widget’ları render eder.","Widgets":["Stack – Görsel ve overlay düzeni.","ClipRRect – Görsel köşe yuvarlatma.","Image.file – Seçilen görsel (varsa).","Placeholder Icon – Eğer görsel yoksa gösterilen icon."]}},"type":"file"},"upload_progress_indicator.dart":{"Purpose":"Dosya yükleme sırasında ilerleme durumunu gösteren özelleştirilmiş bir bileşen sağlar.","Class":"UploadProgressIndicator","Properties":{"progress":"Yükleme yüzdesini temsil eden double değeri (0.0 – 1.0 arası).","showPercentage":"Yüzdelik metin gösterilsin mi? true/false (varsayılan: true)."},"build":{"Purpose":"Yükleme ilerlemesini dairesel ve metinli olarak gösteren UI’ı oluşturur.","Widgets":["Stack – Progress indicator ve yüzdelik metni üst üste yerleştirir.","CircularProgressIndicator – Yükleme animasyonu.","Center – Yüzdelik metni ortalar.","Text – Yüzdelik metni (% ile)."]},"type":"file"},"test_with_social_icons.dart":{"Purpose":"Sosyal medya ikonları ile birlikte metin gösteren test widget’ı.","Class":"TestWithSocialIcons","Properties":{"text":"Gösterilecek metin (String).","iconSize":"Sosyal ikonların boyutu (double, opsiyonel).","iconColor":"İkonların rengi (Color, opsiyonel)."},"build":{"Purpose":"Metni ve ikonları yan yana gösteren satır yapısını render eder.","Widgets":["Row – Metin ve sosyal medya ikonlarını yatay sırada gösterir.","Icon – Belirtilen sosyal medya ikonları (ör: Facebook, Twitter, LinkedIn).","Text – Metin alanı."]},"type":"file"},"ins_image.dart":{"Purpose":"Uygulamada kullanılan basit bir görsel widget’ı sağlar (özellikle arka plan veya logo için).","Class":"InsImage","Properties":{"imageUrl":"Gösterilecek görselin URL’si (String).","width":"Görsel genişliği (double, opsiyonel).","height":"Görsel yüksekliği (double, opsiyonel).","fit":"BoxFit ayarı (ör. BoxFit.cover, BoxFit.contain)."},"build":{"Purpose":"Resmi gösterir, yüklenemediğinde varsayılan placeholder gösterilir.","Widgets":["Image.network – Uzak sunucudan görsel yükler.","Placeholder veya hata durumunda gösterilecek ikon ya da görsel.","Container – Görsel için boyut ve hizalama ayarları."]},"type":"file"},"general_form.dart":{"Purpose":"Dinamik form alanlarının yönetimi için yardımcı widget ve fonksiyonlar içerir.","Classes":{"GeneralFormSection":{"Purpose":"Dinamik form alanlarını render eden ve yönetim sağlayan yapı.","Constructor Parameters":{"fields":"Form alanlarının özelliklerini içeren liste.","onChanged":"Formda değişiklik olduğunda tetiklenen callback."},"State Variables":{"_controllers":"Form alanları için TextEditingController listesi.","_formKey":"FormState için GlobalKey."},"Methods":{"initState":"TextEditingController nesnelerini oluşturur.","dispose":"Tüm controller’ları temizler.","_onFieldChanged":"Bir alan değiştiğinde onChanged callback’i çağrılır.","build":"Form widget’ını oluşturur ve tüm alanları render eder."}}},"type":"file"},"custom_form_field.dart":{"Purpose":"Uygulama genelinde kullanılmak üzere özelleştirilmiş metin giriş alanı bileşeni sağlar (form alanı).","Class":"CustomFormField","Properties":{"controller":"TextEditingController – Metin giriş alanını kontrol eder.","themeProvider":"Tema yapılandırması sağlayan ThemeProvider.","label":"Form alanı başlığı (String).","hint":"Form alanı ipucu (String).","icon":"Alan başındaki ikon (Icon).","validationMessage":"Form alanı validasyon hatası mesajı (String, opsiyonel).","isPassword":"Şifre alanı mı? true/false (varsayılan: false).","isEmail":"E-posta doğrulama yapılacak mı? true/false (varsayılan: false).","isNumeric":"Yalnızca sayısal giriş mi? true/false (varsayılan: false).","isDate":"Tarih seçimi mi? true/false (varsayılan: false).","isPhone":"Telefon alanı mı? true/false (varsayılan: false).","isUrl":"URL alanı mı? true/false (varsayılan: false).","context":"BuildContext – form alanını oluştururken kullanılan context.","maxLines":"Maksimum satır sayısı (varsayılan: 1).","isRequired":"Alan zorunlu mu? true/false (varsayılan: false).","onFieldSubmitted":"Kullanıcı alanı tamamladığında çağrılacak fonksiyon (opsiyonel).","showField":"Alan görüntülenecek mi? true/false (varsayılan: true)."},"build":{"Purpose":"UI’ı oluşturur ve form alanının stilini, tipini ve validasyonunu uygular.","Widgets":["TextFormField – Özelleştirilmiş metin giriş alanı.","Padding – Alanlar arası boşluk ayarları ve yerleşim düzeni.","Icon – Alanın başındaki ikonu gösterir (opsiyonel)."],"Validation":"E-posta, tarih, sayısal ve zorunlu alan kontrolleri desteklenir."},"type":"file"},"custom_button.dart":{"Purpose":"Uygulamada özelleştirilmiş bir buton widget’ı sağlar (renk, ikon, yükseklik vb. gibi parametrelerle).","Class":"CustomButton","Properties":{"label":"Buton metni (String).","onPressed":"Buton basıldığında çağrılacak fonksiyon (VoidCallback).","icon":"Buton başındaki ikon (opsiyonel, IconData).","color":"Buton rengi (Color, opsiyonel).","isLoading":"Yükleme animasyonu gösterilsin mi? (bool, default: false).","isDisabled":"Buton devre dışı mı? (bool, default: false).","height":"Buton yüksekliği (double, default: 45)."},"build":{"Purpose":"Ana UI’ı oluşturur: Butonun görünümü, loading durumu, renk, ikon gibi ayarlarla render eder.","Widgets":["ElevatedButton – Tüm özellikleri özelleştirilebilir buton.","Row – Buton içeriğini yatay olarak hizalar (ikon ve metin).","CircularProgressIndicator – Yükleme sırasında animasyon gösterir."]},"type":"file"},"custom_app_bar.dart":{"Purpose":"Uygulama genelinde kullanılan özelleştirilmiş AppBar bileşeni (başlık çubuğu).","Class":"CustomAppBar","Properties":{"title":"Başlık metni (String).","actions":"AppBar’da sağ tarafta gösterilecek Widget listesi (opsiyonel)."},"build":{"Purpose":"Responsive yapı ve stil ayarlarıyla AppBar’ı render eder.","Widgets":["Row – Logo ve başlık metnini yatay sırada düzenler.","Expanded – Başlık metnini esnek şekilde ortalar.","ThemeSelector – Sağ üst köşede tema ve renk körlüğü ayar menüsü.","actions – İsteğe bağlı sağ üst köşe widget’ları (ör: bildirim ikonları)."]},"type":"file"},"auth_form.dart":{"Purpose":"Kullanıcı girişi ve kaydı için form bileşenlerini yöneten yapı.","Class":"AuthForm","Properties":{"mode":"Auth modunu belirleyen parametre (login, register, forgotPassword, none).","onSubmit":"Form gönderildiğinde tetiklenen callback fonksiyonu (String email, String password).","onForgotPassword":"Şifre sıfırlama isteği gönderildiğinde çağrılacak fonksiyon."},"State Variables":{"emailController":"Email giriş alanı için TextEditingController.","passwordController":"Şifre giriş alanı için TextEditingController.","isLoading":"İşlem sırasında loading durumu (true/false)."},"Methods":{"_handleSubmit":{"Purpose":"Form validasyonunu kontrol eder ve onSubmit callback’ini tetikler."},"build":{"Purpose":"UI’ı oluşturur: Form alanları, butonlar ve isteğe bağlı şifre sıfırlama linki.","Widgets":["CustomFormField – Email ve şifre giriş alanları.","ElevatedButton – Giriş veya Kayıt butonu.","TextButton – Şifreyi mi unuttun? linki (mode: login ise görünür)."]}},"type":"file"},"custon_scaffold.dart":{"Purpose":"Tüm uygulama genelinde kullanılan özelleştirilmiş Scaffold bileşeni (ana layout iskeleti).","Class":"CustomScaffold","Properties":{"title":"Başlık metni (String, opsiyonel).","body":"Ana içerik (Widget, opsiyonel).","actions":"AppBar’da sağ tarafta gösterilecek Widget listesi (opsiyonel).","floatingActionButton":"Ekranın sağ alt köşesinde yer alacak yüzen buton (opsiyonel)."},"build":{"Purpose":"Responsive yapı ile AppBar, Drawer, gövde (body) ve menü öğelerini render eder.","Widgets":["AppBar – Başlık, menü, logo ve tema seçici içerir.","Drawer – Geniş ekran değilse (mobilde) açılan menü listesi.","Body – Verilen içerik (body parametresi).","ThemeSelector – Sağ üstteki tema ve renk körlüğü ayar menüsü."],"Responsive":{"wideScreen":"650px’ten geniş ekran için özel menü öğesi gösterimi.","tWideScreen":"850px’ten geniş ekran için metinli menü öğeleri."}},"type":"file"}},"main.dart":{"MyHttpOverrides":{"Purpose":"Geliştirme modunda SSL hatalarını bypass eder.","Methods":{"createHttpClient":"Sertifika doğrulama bypass’ı sağlar (badCertificateCallback)."}},"main":{"Purpose":"Uygulamayı başlatır.","Features":["WidgetsFlutterBinding.ensureInitialized() – Flutter binding’i başlatır.","HttpOverrides.global – Eğer release değilse, MyHttpOverrides kullanılır.","runApp – MultiProvider ile tüm sağlayıcılar (providers.dart) yüklenir, ana widget MmsApp başlatılır."]},"MmsApp":{"Purpose":"Uygulamanın kök widget’ıdır.","build":{"Provider":["themeProvider ve colorBlindnessProvider Provider’lardan alınır."],"Directionality":"Yazı yönünü LTR yapar.","Stack":[{"ColorFiltered":"Renk körlüğü filtrelerini uygular (currentFilter).","MaterialApp":{"title":"SeaOfSea","themeMode":"themeProvider.themeMode","onGenerateRoute":"routes.dart’daki generateRoute fonksiyonu.","initialRoute":"/","localizationsDelegates":"Dil destekleri.","supportedLocales":"en dili tanımlı."}},{"Blur Efekti":{"Condition":"Eğer colorBlindnessProvider.isEffectOn ve currentEffect blur ise:","BackdropFilter":"Belirtilen blurLevel değerinde blur efekti uygular.","GestureDetector":"Kullanıcı tıklayınca bulanıklık kapatılır."}}]}},"MainPage":{"Purpose":"Ana ekran widget’ı.","build":{"AuthProvider":"isLoggedIn durumu alınır.","Kullanıcı Kontrol":{"Evetse":"HomePage()’e yönlendirir.","Hayırsa":"AuthPage’e yönlendirir (login modu)."}}},"Notes":["providers.dart – Tüm Provider yapılarını tanımlar ve MultiProvider’da yüklenir.","routes.dart – Uygulamanın tüm sayfa yönlendirmelerini merkezi olarak yönetir."],"type":"file"}},"php":{"type":"directory","bootstrap.php":{"type":"file","Purpose":"Uygulamanın PHP tarafında temel yapılandırmaları, autoload ve .env dosyası yükleme, JWT kontrolü, loglama gibi işlemleri yönetir.","Imports":["Dotenv\\Dotenv","Monolog\\Logger","Monolog\\Handler\\StreamHandler","DatabaseHandler","UserHandler"],"Classes":{},"Methods":{"getLogger":{"Purpose":"Global hata ve bilgi loglarını merkezi olarak sağlayan logger örneği döndürür.","Input":"Yok","Output":"Logger (Monolog\\Logger)"},"getLoggerInfo":{"Purpose":"Bilgi seviyesindeki logları sağlayan logger örneği döndürür.","Input":"Yok","Output":"Logger (Monolog\\Logger)"},"getAuthorizationHeader":{"Purpose":"İstekten Authorization header bilgisini çeker (Bearer ya da Basic gibi).","Input":"Yok (sunucu header bilgileri kullanılır)","Output":"string | null"},"getBearerToken":{"Purpose":"Authorization header içinden Bearer token'ı ayrıştırır.","Input":"Yok (getAuthorizationHeader fonksiyonunu kullanır)","Output":"string | null"}},"ErrorHandling":{"Purpose":"Merkezi exception ve error handler'lar ile hataları log dosyasına kaydeder ve son kullanıcıya basit JSON hata mesajı döner.","Output":{"success":false,"message":"An error occurred. Please try again later."}},"ExecutionFlow":["Autoload ve handler dosyalarını dahil et (.env, DatabaseHandler, UserHandler)","Logger'ları (error ve info) başlat","Merkezi exception ve error handler'ları devreye al","DatabaseHandler ve UserHandler örneklerini oluştur","JWT_SECRET kontrolü yap (.env'den okunur ve boşsa hata döner)"],"InputOutputSummary":{"Input":"Sunucu istekleri (header, .env dosyası, oturumlar)","Output":"Başarılıysa sessiz çalışır, hata olursa JSON formatında hata mesajı"},"Recommendations":["Logger ve error handler'lar merkezi yönetim için ideal – config dosyası ile özelleştirilebilir.","JWT_SECRET gibi kritik ayarlar için .env yerine config.php gibi ayrı bir yapı tercih edebilirsin.","Logger seviyelerini (INFO, ERROR, DEBUG) ayrı log dosyalarına yazmak uzun vadede faydalı olabilir."]},".htaccess":{"type":"file","Purpose":"PHP projesinde HTTPS yönlendirmesi ve JWT için Authorization header'ını doğru şekilde PHP'ye iletmek için Apache yapılandırmasını yönetir.","Sections":{"HTTPSRedirect":{"Purpose":"Eğer domain localhost değilse, tüm HTTP isteklerini 301 ile HTTPS'ye yönlendirir.","CodeSnippet":["RewriteCond %{HTTP_HOST} !^localhost$","RewriteCond %{HTTPS} !=on","RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]"]},"AuthorizationHeaderForwarding":{"Purpose":"JWT kontrolü için Authorization header'ını PHP'ye (CGI, FastCGI vb. ortamlar için) taşır.","CodeSnippet":["RewriteCond %{HTTP:Authorization} ^(.*)","RewriteRule .* - [E=HTTP_AUTHORIZATION:%1]","SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1"]}},"InputOutputSummary":{"Input":"Apache'ye gelen HTTP istekleri ve header'lar.","Output":"HTTP -> HTTPS yönlendirme (domain localhost değilse), Authorization header'ın PHP'ye iletilmesi."},"Recommendations":["Eğer Apache değil de Nginx kullanıyorsan, bu yapılandırma server bloklarına taşınmalı (ör. Nginx config).","Yerel geliştirme ortamında (localhost) HTTPS zorlanmadığı için `localhost` istisnası doğru bir tercih."]},"lib":{"type":"directory","css":{"type":"directory","mail.css":{"type":"file","Purpose":"Kullanıcı arayüzünü sade ve modern tutmak için temel CSS stillerini içerir. Arayüzde input, buton ve mesaj alanları için responsive ve modern tasarım sağlar.","Sections":{"Base":{"Purpose":"Sayfanın genel yapısını ve font ailesini ayarlar.","Selectors":["body",".container"]},"Messages":{"Purpose":"Başarılı, hatalı ve bilgi mesajlarını renklendirir.","Selectors":[".message",".message.success",".message.error",".message.info"]},"Inputs":{"Purpose":"Input alanları için rahat bir kullanım ve odaklanma efekti sağlar.","Selectors":[".input-group",".input-group input",".input-group .error-message"]},"Buttons":{"Purpose":"Butonlar için modern ve etkileşimli tasarım sunar.","Selectors":["button","button:hover"]}},"InputOutputSummary":{"Input":"Kullanıcının form alanlarına veya butonlara etkileşimi.","Output":"Daha kullanıcı dostu ve modern bir arayüz."},"Recommendations":["Gerekirse responsive tasarım için media query eklenebilir.","Input alanları için placeholder desteği artırılabilir.","Buton animasyonları veya geçiş efektleri eklenerek kullanıcı deneyimi geliştirilebilir."]}},"handlers":{"type":"directory","CompanyHandler.php":{"type":"file","Purpose":"Tüm şirket işlemlerini (CRUD, çalışan yönetimi, pozisyon yönetimi, tip yönetimi vb.) PHP tarafında yöneten ana sınıftır.","Imports":["CRUDHandler","UserHandler","Firebase\\JWT\\Key","Firebase\\JWT\\JWT","Firebase\\JWT\\ExpiredException","Illuminate\\Database\\Capsule\\Manager"],"Classes":{"CompanyHandler":{"Purpose":"Şirket bazlı tüm veri akışını (oluşturma, güncelleme, silme, pozisyonlar ve çalışan yönetimi) yönetir. Ayrıca JWT doğrulama ve kullanıcı kontrolü gibi önemli backend işlemlerini içerir.","Properties":{"crudHandler":"Veri tabanı işlemleri için CRUDHandler örneği.","logger":"Monolog error logger.","loggerInfo":"Monolog bilgi seviyesi logger.","userId":"JWT doğrulaması sonrası kullanıcı ID’si."},"Methods":{"__construct":"Tüm bağımlılıkları başlatır, kullanıcı ID’sini alır.","buildResponse":"Tüm JSON yanıtlarını standartlaştırır.","createCompany":"Yeni şirket oluşturur (email ve userId doğrulaması yapar).","createUserCompany":"Kullanıcıyı şirkete ekler (admin rolü kontrolü).","getUserCompanies":"Kullanıcının ilişkili olduğu şirketleri listeler.","getPositionsByHandler":"Verilen parametreyle (kolon/değer) pozisyonları listeler (güvenlik için white-list kontrolü).","getPositionAreas":"Tüm pozisyon alanlarını ve kategorilerini gruplandırır.","getPositionsByArea":"Belirli bir alandaki pozisyonları listeler.","getCompanyEmployees":"Şirket çalışanlarını listeler (user bilgileri dahil).","getUserCompanyRole":"Kullanıcının şirketteki rolünü döner (follower / none / admin).","getCompanyFollowers":"Şirketi takip eden kullanıcıları listeler.","getAllCompanies":"Tüm şirketleri sayfa bazlı (pagination) listeler, arama ve sıralama destekler.","getCompanyDetail":"Belirli bir şirketin tüm detaylarını getirir.","updateCompany":"Admin onayıyla şirket bilgilerini günceller.","getCompanyTypes":"Tüm şirket tiplerini listeler, isteğe göre filtre uygular.","deleteCompany":"Admin onayıyla şirketi siler."},"ErrorHandling":{"Purpose":"Tüm hatalar Monolog logger ile kaydedilir ve standart JSON response ile frontend’e bildirilir."},"InputOutputSummary":{"Input":"API endpoint üzerinden gelen JSON body (ör. company_id, area, filter_ids vb.) ve JWT header bilgisi.","Output":"JSON response (success, message, data, errors, showMessage alanlarıyla)."},"Recommendations":["getAllCompanies metoduna advanced filter (created_at range, status gibi) eklenebilir.","updateCompany metodunda JSON veri kontrolü için daha fazla validation yapılabilir.","getUserCompanyRole ve getCompanyEmployees gibi metodlar için cache desteği eklenerek performans artırılabilir.","Tüm CRUD işlemleri için transaction (Capsule::transaction) desteği uzun vadede veri tutarlılığını artırır."]}}},"CRUDHandlers.php":{"type":"file","Purpose":"Tüm temel CRUD işlemlerini ve ek sorgu yapılarını (advanced query, refresh token temizleme) merkezi olarak yöneten PHP sınıfı.","Imports":["Illuminate\\Database\\Capsule\\Manager as Capsule"],"Classes":{"CRUDHandler":{"Purpose":"Veritabanı işlemlerini tek merkezden yürüten handler. create, read, update, delete, count gibi temel işlemler dışında advanced query gibi esnek sorguları da destekler.","Properties":{"logger":"Merkezi loglama aracı (Monolog), hata ve işlem loglarını yönetir."},"Methods":{"__construct":"Logger'ı başlatır.","create":{"Purpose":"Verilen tabloya yeni bir kayıt ekler.","Input":"string $table, array $data","Output":"int (eklenen kayıt ID'si) veya false"},"read":{"Purpose":"Verileri çeker (koşullar, join, pagination, ek methodlar destekler).","Input":"string $table, array $conditions, array $columns, bool $fetchAll, array $joins, array $pagination, array $additionaly, bool $asArray","Output":"Collection|array (isteğe göre)"},"update":{"Purpose":"Verilen koşullara göre güncelleme yapar, mevcut veri kontrolü (değişim yoksa atlama) destekler.","Input":"string $table, array $data, array $conditions","Output":"int (güncellenen satır sayısı) veya true/false"},"delete":{"Purpose":"Verilen koşullara göre kayıtları siler.","Input":"string $table, array $conditions","Output":"int (silinen satır sayısı)"},"count":{"Purpose":"Koşullara göre satır sayısını döner.","Input":"string $table, array $conditions","Output":"int"},"advancedQuery":{"Purpose":"Daha esnek sorgu ihtiyacını karşılar (callback ile dinamik sorgu).","Input":"string $table, callable $callback","Output":"mixed"},"deleteExpiredRefreshTokens":{"Purpose":"refresh_tokens tablosundan süresi dolan tokenları siler.","Input":"Yok","Output":"int (silinen kayıt sayısı)"},"executeQuery":{"Purpose":"Tüm sorguları ortak try-catch bloğu içinde çalıştırır (hata durumunda loglar).","Input":"callable $callback, string $errorMessage, $default (opsiyonel)","Output":"mixed"},"applyCondition":{"Purpose":"where, whereIn gibi koşulları dinamik şekilde query’ye ekler.","Input":"query builder $query, string $key, mixed $value","Output":"void"}},"ErrorHandling":{"Purpose":"executeQuery fonksiyonu tüm sorguları try-catch içinde çalıştırır. Hatalar merkezi logger ile kaydedilir."},"InputOutputSummary":{"Input":"Tablo adı, koşullar (where, like, in vb.), join ve opsiyonel parametreler (pagination, additionaly).","Output":"Veritabanı sonuçları (array/Collection), ya da int (silme/güncelleme)."},"Recommendations":["read fonksiyonuna whereBetween, orWhere gibi gelişmiş sorgu destekleri eklenebilir.","Tüm metodlar için transaction (Capsule::transaction) opsiyonu verilebilir.","applyCondition fonksiyonunun daha geniş operator desteği (ör. BETWEEN) eklenebilir.","Silme gibi hassas işlemler için soft delete desteği eklenebilir."]}}},"CVHandler.php":{"type":"file","Purpose":"Kullanıcıların CV (özgeçmiş) bilgilerini yönetmek, güncellemek ve görüntülemek için PHP handler sınıfıdır.","Imports":["PermissionHandler","CRUDHandler","UserHandler","Illuminate\\Database\\Capsule\\Manager"],"Classes":{"CVHandler":{"Purpose":"Kullanıcının CV verilerini kaydeder, günceller ve çeşitli veri alanlarını JSON formatında saklar. Şehir/ülke isimlerini dinamik olarak getirir ve erişim izinlerini kontrol eder.","Properties":{"crud":"CRUDHandler örneği, veri tabanı işlemlerini yönetir.","logger":"Hata ve sistem loglarını kaydeden Monolog logger.","loggerInfo":"Bilgi loglarını kaydeden Monolog loggerInfo.","permissionHandler":"Kullanıcı izinlerini kontrol eder (PermissionHandler sınıfı).","table":"CV verisinin saklandığı tablo: user_cv"},"Methods":{"__construct":"Bağımlılıkları başlatır ve loggerları yükler.","updateCV":{"Purpose":"Kullanıcının CV verisini günceller veya yeni kayıt oluşturur.","Input":"array $fields (ör. name, phone, social, education, work_experience vb.)","Output":"array (JSON response: success, message, data, errors, showMessage)"},"isJson":{"Purpose":"Bir string’in JSON olup olmadığını kontrol eder.","Input":"string $string","Output":"bool"},"listCountries":{"Purpose":"Ülkeleri (cities tablosundan) listeler.","Input":"Yok","Output":"array (success, data)"},"listCitiesByCountryName":{"Purpose":"Belirli bir ülkeye ait şehirleri listeler (capital gibi filtrelerle).","Input":"string $countryName","Output":"array (success, data)"},"getUserId":{"Purpose":"JWT token’dan kullanıcı ID’sini alır.","Input":"Yok","Output":"int|null"},"getPermissionHandler":{"Purpose":"PermissionHandler sınıfını döner (gerektiğinde başlatır).","Input":"Yok","Output":"PermissionHandler"},"buildResponse":{"Purpose":"Tüm yanıtları standart JSON yapısında döner.","Input":"bool $success, string $message, array $data, bool $showMessage, array $errors","Output":"array"},"getCV":{"Purpose":"Kullanıcının kendi CV’sini getirir.","Input":"Yok","Output":"array (success, data)"},"getCVByUserId":{"Purpose":"Başka bir kullanıcıya ait CV’yi (izinler dahil) getirir.","Input":"int $targetUserId","Output":"array (success, data)"},"createOrUpdateCV":{"Purpose":"Kullanıcıdan gelen POST verileri ile CV’yi günceller veya oluşturur.","Input":"Yok (POST verileri okunur)","Output":"array (success, message, data)"}},"ErrorHandling":{"Purpose":"Hatalar logger aracılığıyla kaydedilir, kullanıcıya standart JSON formatında döner."},"InputOutputSummary":{"Input":"API endpoint’ten gelen veriler (JWT header, $_POST vb.), şehir/ülke bilgileri (id, country name gibi).","Output":"Başarılı ise JSON data; hata varsa JSON hata mesajı (success, message, data, errors, showMessage)."},"Recommendations":["updateCV ve createOrUpdateCV metotlarına alan doğrulama (ör. e-posta regex) eklenebilir.","getCVByUserId için erişim izni kontrolü PermissionHandler ile merkezi hale getirilebilir.","Şehir/ülke verileri için cache desteği eklenerek performans artırılabilir."]}}},"DatabaseHandler.php":{"type":"file","Purpose":"Uygulamanın MySQL veritabanı bağlantısını yöneten handler sınıfı. Eloquent (Capsule) üzerinden bağlantıyı kurar ve test eder.","Imports":["Illuminate\\Database\\Capsule\\Manager as Capsule"],"Classes":{"DatabaseHandler":{"Purpose":"Veritabanı bağlantısını başlatan ve test eden ana sınıf. Ortam değişkenlerini kontrol eder, Eloquent bağlantısını başlatır ve erişim sağlar.","Properties":{"capsule":"Capsule (Eloquent) bağlantı yöneticisi.","logger":"Merkezi loglama aracı (Monolog)."},"Methods":{"__construct":{"Purpose":"Veritabanı bağlantısını başlatır. Ortam değişkenlerini kontrol eder ve bağlantıyı kurar.","Input":"Yok","Output":"Yok (başarılıysa sessiz çalışır; hata varsa Exception atar)"},"getConnection":{"Purpose":"Var olan bağlantıyı döner veya yoksa bağlantıyı başlatır.","Input":"Yok","Output":"Illuminate\\Database\\Connection"},"testConnection":{"Purpose":"Veritabanı bağlantısını test eder (SHOW TABLES sorgusu yapar).","Input":"Yok","Output":"array (tablo isimlerini döner veya Exception atar)"}},"ErrorHandling":{"Purpose":"Bağlantı hataları veya test sırasında oluşan hatalar Monolog logger aracılığıyla kaydedilir. Hatalar Exception olarak tekrar fırlatılır."},"InputOutputSummary":{"Input":"Ortam değişkenleri (DB_HOST, DB_NAME, DB_USER, DB_PASSWORD).","Output":"Veritabanı bağlantısı (Capsule::connection) veya test sonucu tablo listesi."},"Recommendations":["Ortam değişkenlerini kontrol ederken daha fazla parametre (ör. port, charset) esneklikle eklenebilir.","Bağlantı yapılandırmasını config.php gibi merkezi bir dosyada toplamak uzun vadede daha sağlıklı olur.","Test connection metodunda tablo isimleri dışında veritabanı bilgileri (ör. version) de döndürülebilir."]}}},"FileHandler.php":{"type":"file","Purpose":"Dosya yükleme, silme ve listeleme işlemlerini merkezi olarak yöneten PHP sınıfı.","Imports":["Monolog\\Logger","Monolog\\Handler\\StreamHandler"],"Classes":{"FileHandler":{"Purpose":"Kullanıcıların dosya yükleme (JPEG, PNG, PDF), silme ve mevcut dosyaları listeleme gibi temel işlemlerini yönetir. Ayrıca loglama ve güvenli dosya adı sağlama işlevlerini barındırır.","Properties":{"uploadDir":"Yüklenen dosyaların saklanacağı dizin (varsayılan: /uploads).","logger":"Hata ve kritik durumları loglayan Monolog logger."},"Methods":{"__construct":{"Purpose":"Dosya yükleme dizinini ayarlar, yoksa oluşturur. Logger’ı başlatır.","Input":"string $uploadDir (isteğe bağlı; varsayılan uploads/ dizini)","Output":"Yok (başarılıysa sessiz çalışır)"},"uploadFile":{"Purpose":"Kullanıcıdan gelen dosyayı yükler. Belirli mime-type’lara izin verir (JPEG, PNG, PDF).","Input":"array $file (ör. $_FILES['file']), array $allowedTypes (isteğe bağlı).","Output":"array (success, path veya error)"},"deleteFile":{"Purpose":"Belirtilen dosyayı siler.","Input":"string $fileName","Output":"array (success, error (varsa))"},"listFiles":{"Purpose":"Yükleme dizinindeki tüm dosyaları listeler.","Input":"Yok","Output":"array (dosya isimleri)"},"sanitizeFileName":{"Purpose":"Dosya adındaki tehlikeli karakterleri temizler, güvenli hale getirir.","Input":"string $fileName","Output":"string (temizlenmiş dosya adı)"},"logError":{"Purpose":"Hataları Monolog aracılığıyla loglar.","Input":"string $message, string $details","Output":"void"}},"ErrorHandling":{"Purpose":"Hatalar log dosyasına (file_operations.log) yazılır. Hatalı yükleme veya silme girişimlerinde kullanıcı dostu hata mesajı döner."},"InputOutputSummary":{"Input":"Dosya yükleme isteği ($_FILES), dosya isimleri (silme ve listeleme).","Output":"Başarı veya hata bilgisi JSON formatında response."},"Recommendations":["uploadFile metodu, dosya boyutunu kontrol etmek için ek limit parametreleri içerebilir.","Dosya türü kontrolü için MIME tipine ek olarak dosya uzantısı kontrolü yapılabilir.","Dosya listeleme metoduna sayfalama desteği eklenebilir (pagination).","Silme işlemlerinde geri alınabilirlik için soft delete yaklaşımı değerlendirilebilir."]}}},"ImageResizeHandler.php":{"type":"file","Purpose":"Resimleri yeniden boyutlandırmak için PHP handler sınıfı. PNG, JPEG ve GIF dosyalarını destekler ve oranı koruyarak yeniden boyutlandırır.","Namespace":"App\\Handlers","Classes":{"ImageResizeHandler":{"Purpose":"Resim dosyalarını verilen maksimum boyuta göre yeniden boyutlandırır. Şeffaflığı korur ve PNG formatında çıktı verir.","Properties":{"defaultMaxSize":"int - Varsayılan maksimum genişlik/yükseklik (1920px).","outputFormat":"string - Çıktı formatı (PNG)."},"Methods":{"resizeImage":{"Purpose":"Belirtilen resmi yeniden boyutlandırır ve PNG formatında yeni bir dosya oluşturur.","Input":"string $filePath (kaynak yol), string $outputDir (hedef klasör), int|null $maxSize (maksimum boyut, opsiyonel).","Output":"string|null - Yeni oluşturulan dosyanın yolu veya hata durumunda null."}},"ErrorHandling":{"Purpose":"Geçersiz resim veya desteklenmeyen formatlarda null döner; PHP hata loglarına manuel yazma yok (eklenebilir)."},"InputOutputSummary":{"Input":"Kullanıcının yüklediği resim yolu ve hedef klasör.","Output":"Yeniden boyutlandırılmış resim dosyası (PNG formatında) ve yeni yol."},"Recommendations":["resizeImage metoduna çıktı formatı (JPEG, WEBP gibi) seçimi için parametre eklenebilir.","Kalite ayarı (ör. imagejpeg kalite parametresi gibi) özelleştirilebilir.","Resim boyutlandırma öncesi ve sonrası için event loglama (Monolog) eklenebilir.","Yüksek çözünürlüklü dosyalarda performans için imagick gibi kütüphaneler değerlendirilebilir."]}}},"ImageUploadHandler.php":{"type":"file","Purpose":"Kullanıcıdan gelen resim dosyalarını yüklemek, base64 resimleri işlemek ve eski resimleri silmek için handler sınıfı. Ayrıca yeniden boyutlandırma ve EXIF verisi yazma desteği sağlar.","Namespace":"App\\Handlers","Classes":{"ImageUploadHandler":{"Purpose":"Kullanıcı yüklemelerini (dosya ve base64), eski görsel silmeyi, boyutlandırma ve meta veri işlemlerini yönetir.","Properties":{"allowedFormats":"Desteklenen dosya uzantıları (jpg, jpeg, png, webp).","maxFileSize":"Maksimum dosya boyutu (15 MB).","uploadDir":"Yükleme dizini.","logger":"Hata ve işlem loglarını kaydeden Monolog logger."},"Methods":{"__construct":{"Purpose":"Yükleme dizinini ayarlar ve oluşturur (gerekirse). Logger’ı başlatır.","Input":"string $uploadDir (ör. uploads/).","Output":"Yok"},"handleUpload":{"Purpose":"Dosya veya base64 verisini yükler, eski resmi siler ve boyutlandırma işlemi yapar.","Input":"array $file (isteğe bağlı), string $imageBase64 (isteğe bağlı), int $userId, array $meta, int $maxSize (varsayılan: 1920).","Output":"string (yeni dosya adı)"},"handleUploadWithPrefix":{"Purpose":"Belirli bir prefix ile dosya yükler, boyutlandırma ve meta veri işlemlerini gerçekleştirir.","Input":"array $file, int $userId, string $prefix, array $meta, int $maxSize","Output":"string (yeni dosya adı)"},"deleteOldImage":{"Purpose":"Kullanıcının eski görselini veritabanından bulup siler (cover_image alanı).","Input":"int $userId","Output":"void"},"validateImage":{"Purpose":"Dosya formatı ve boyutunu kontrol eder (allowedFormats ve maxFileSize kullanır).","Input":"array $file","Output":"void (hatalıysa Exception atar)"},"uploadImage":{"Purpose":"Dosya yükler ve meta veriyi kaydeder.","Input":"array $file, int $userId, array $meta","Output":"string (yeni dosya adı)"},"uploadBase64Image":{"Purpose":"Base64 string’ini decode eder, dosya olarak kaydeder ve meta veriyi kaydeder.","Input":"string $base64Image, int $userId, array $meta","Output":"string (yeni dosya adı)"},"resizeImage":{"Purpose":"Resmi verilen maksimum boyuta oran koruyarak yeniden boyutlandırır ve PNG olarak kaydeder.","Input":"string $filePath, int $maxSize","Output":"void"},"generateFileName":{"Purpose":"Klasik dosya yüklemelerinde dosya adını (userId, zaman damgası ve uzantı) oluşturur.","Input":"array $file, int $userId","Output":"string (dosya adı)"},"generateFileNameFromBase64":{"Purpose":"Base64 yüklemeleri için dosya adını oluşturur.","Input":"int $userId","Output":"string (dosya adı, ör. 123_1234567890.png)"},"writeExifData":{"Purpose":"EXIF meta verilerini dosyaya yazar (şu an boş; genişletilebilir).","Input":"string $filePath, array $meta","Output":"void"}},"ErrorHandling":{"Purpose":"Hatalar Monolog logger aracılığıyla kaydedilir. Bazı hatalar Exception olarak atılır."},"InputOutputSummary":{"Input":"Kullanıcının yükleme isteği (file veya base64), userId, meta bilgileri (ör. EXIF).","Output":"Yükleme sonucu (yeni dosya adı) veya hata durumunda Exception."},"Recommendations":["resizeImage metoduna farklı çıktı formatları desteği (ör. webp) eklenebilir.","EXIF verisi yazma kısmı tamamlanarak metadata desteği artırılabilir.","Dosya isimlerinde UUID gibi çakışmaz benzersiz yapılar tercih edilebilir.","Dosya tip kontrolü MIME-type ve uzantı kontrolü birleştirilerek daha güvenli hale getirilebilir."]}}},"LoggerHandler.php":{"type":"file","Purpose":"Uygulamanın loglama işlemlerini (Monolog üzerinden) merkezi olarak yöneten handler sınıfı.","Imports":["Monolog\\Logger","Monolog\\Handler\\StreamHandler"],"Classes":{"LoggerHandler":{"Purpose":"Monolog tabanlı logger oluşturur ve belirli bir kanala (channel) log kaydı ekler.","Properties":{"logger":"Monolog\\Logger - Log kayıtlarını yöneten Monolog logger nesnesi."},"Methods":{"__construct":{"Purpose":"Logger nesnesini başlatır ve log dosyasına (app.log) handler ekler.","Input":"string $channel (varsayılan: 'app')","Output":"Yok"},"log":{"Purpose":"Belirtilen seviyede (INFO, ERROR, vb.) log kaydı ekler.","Input":"string $level, string $message, array $context (opsiyonel).","Output":"void"}},"ErrorHandling":{"Purpose":"Monolog kendi hata yönetimi üzerinden çalışır. Dosya izin hataları veya yazma hataları gibi durumlar PHP error log'larına yazılabilir."},"InputOutputSummary":{"Input":"Log kaydı (level, message, context).","Output":"app.log dosyasına yazılır (veya belirlenen başka log dosyasına)."},"Recommendations":["Logger seviyelerini (ör. error.log, info.log gibi) ayrı dosyalara yazmak için çoklu handler desteği eklenebilir.","Dosya yolu (__DIR__ . '/../../logs/app.log') yapılandırılabilir hale getirilebilir (config.php gibi).","Logger seviyeleri için standart Monolog seviyeleri (Logger::INFO, Logger::ERROR vb.) kullanılmalı (string değil)."]}}},"MailHandler.php":{"type":"file","Purpose":"SMTP üzerinden e-posta gönderimini yöneten PHP handler sınıfı. PHPMailer kütüphanesini kullanır ve loglama desteği vardır.","Imports":["PHPMailer\\PHPMailer\\PHPMailer","PHPMailer\\PHPMailer\\Exception"],"Classes":{"MailHandler":{"Purpose":"SMTP e-posta gönderimini yönetir. PHPMailer konfigürasyonu, e-posta hazırlama ve gönderme işlemlerini kapsar.","Properties":{"mailer":"PHPMailer nesnesi.","logger":"Monolog logger - Hatalar ve e-posta işlemleri loglanır."},"Methods":{"__construct":{"Purpose":"Mailer’ı yapılandırır ve varsayılan gönderen bilgilerini ayarlar. Logger başlatılır.","Input":"Yok","Output":"Yok (Başarılıysa sessiz; hata varsa Exception atar)"},"configureMailer":{"Purpose":"SMTP sunucu ve kimlik bilgilerini PHPMailer’a yükler.","Input":"Yok (çevresel değişkenlerden okur)","Output":"void"},"sendMail":{"Purpose":"Alıcı, konu ve içeriği verilen e-postayı gönderir.","Input":"string $to, string $subject, string $body, bool $isHtml (varsayılan true)","Output":"bool (true: başarı, false: hata)"},"prepareMail":{"Purpose":"Gönderilecek e-postanın başlık ve gövdesini hazırlar (HTML ve alternatif metin).","Input":"string $to, string $subject, string $body, bool $isHtml","Output":"void"}},"ErrorHandling":{"Purpose":"Mailer yapılandırma veya gönderim hataları logger aracılığıyla kaydedilir ve Exception durumunda kullanıcı dostu mesaj döner."},"InputOutputSummary":{"Input":"E-posta bilgileri (alıcı, konu, içerik), .env yapılandırmaları (MAIL_HOST, MAIL_USERNAME, vb.).","Output":"true (başarılı gönderim) veya false (hata durumunda)."},"Recommendations":["SMTP port ve kimlik bilgileri config.php gibi merkezi bir dosyada saklanabilir.","Birden fazla alıcı veya cc/bcc desteği için prepareMail metoduna parametre eklenebilir.","Gönderim sırasında e-posta loglarının (kim, ne zaman gönderdi) veritabanında saklanması değerlendirilebilir."]}}},"PasswordResetHandler.php":{"type":"file","Purpose":"Kullanıcının şifresini sıfırlamak için e-posta tabanlı istek oluşturma, token doğrulama ve şifre yenileme işlemlerini merkezi olarak yöneten PHP sınıfı.","Imports":["MailHandler","CRUDHandler"],"Classes":{"PasswordResetHandler":{"Purpose":"Parola sıfırlama akışının tüm adımlarını yönetir: istek oluşturma, e-posta gönderimi, token doğrulama ve yeni şifreyi kaydetme.","Properties":{"mailHandler":"E-posta gönderimi için MailHandler örneği.","crud":"Veritabanı işlemleri için CRUDHandler örneği."},"Methods":{"__construct":{"Purpose":"MailHandler ve CRUDHandler bağımlılıklarını başlatır.","Input":"Yok","Output":"Yok"},"createResetRequest":{"Purpose":"Verilen e-posta adresine ait bir parola sıfırlama isteği oluşturur ve e-posta gönderir.","Input":"string $email","Output":"bool (e-posta gönderimi başarılı ise true)"},"sendResetEmail":{"Purpose":"Parola sıfırlama linkini içeren e-postayı gönderir.","Input":"string $email, string $resetLink","Output":"bool"},"verifyResetToken":{"Purpose":"Verilen token’ın geçerli ve süresi dolmamış olup olmadığını kontrol eder.","Input":"string $token","Output":"object (geçerli reset kaydı) veya Exception"},"resetPassword":{"Purpose":"Kullanıcının şifresini yeni şifreyle günceller ve ilgili parola sıfırlama isteğini siler.","Input":"string $email, string $newPassword","Output":"bool (başarı durumu)"}},"ErrorHandling":{"Purpose":"Geçersiz e-posta, token süresi dolmuş gibi durumlarda Exception atar. Mail gönderim hataları Monolog logger üzerinden loglanır."},"InputOutputSummary":{"Input":"Kullanıcının e-posta adresi (reset istek ve şifre yenileme), token (doğrulama), yeni şifre.","Output":"Başarılı işlem için true; hatalarda Exception veya false (e-posta gönderimi için)."},"Recommendations":["resetPassword metodunda e-posta gönderimi ile kullanıcı bilgilendirmesi eklenebilir.","Token süresi ve uzunluğu yapılandırılabilir hale getirilebilir (ör. config.php).","Yüksek güvenlik için IP bazlı parola sıfırlama isteği sınırlamaları değerlendirilebilir (ör. rate limiting)."]}}},"PermissionHandler.php":{"type":"file","Purpose":"Kullanıcılara veya rollere ait tüm erişim izinlerini kontrol eden ve yöneten PHP sınıfı. Hem rol tabanlı hem de kullanıcıya özel izinleri yönetir.","Imports":["CRUDHandler","UserHandler","PermissionHelper","Firebase\\JWT\\Key","Illuminate\\Database\\Capsule\\Manager","Firebase\\JWT\\JWT","Firebase\\JWT\\ExpiredException"],"Classes":{"PermissionHandler":{"Purpose":"Yetki ve erişim kontrol işlemlerini merkezi şekilde yönetir. JSON tabanlı izin, user_permissions, role_permissions ve global erişim düzeyi (access_level) bazında izin kontrolü sağlar.","Properties":{"crudHandler":"CRUD işlemlerini yürüten handler.","userId":"Kullanıcının ID’si (JWT’den çekilir).","userRoleId":"Kullanıcının rol ID’si (users tablosundan alınır)."},"Methods":{"__construct":"Bağımlılıkları başlatır ve kullanıcının kimliğini alır. Rol ID’sini alır, yetkisiz erişim varsa hata döner.","checkPermission":{"Purpose":"Verilen permission_code için çok aşamalı (JSON, user, role, global) izin kontrolü yapar.","Input":"string $permissionCode, int|null $entityId, string $entityType (varsayılan: company)","Output":"array (success, message, statusCode gibi)."},"getUserEntityRole":{"Purpose":"Kullanıcının bir varlıktaki rolünü döner.","Input":"int|null $entityId, string $entityType","Output":"string|null (rol)"},"hasPermission":{"Purpose":"Belirli bir izne sahip olup olmadığını bool olarak döner (kapsayıcı metod).","Input":"string $permissionCode, int|null $entityId, string $entityType","Output":"bool"},"getAllPermissions":{"Purpose":"Tüm sistem izinlerini (permissions tablosundan) listeler.","Input":"string $scope (varsayılan: company)","Output":"array (success, data, errors vb.)"},"getAllUserPermissions":{"Purpose":"Kullanıcının tüm izinlerini toplar (rol ve user_permissions tablosu dahil).","Input":"int|null $entityId, string $entityType","Output":"array"},"updateUserPermissions":{"Purpose":"users tablosundaki sPermission alanını günceller (JSON formatında).","Input":"int $targetUserId, int $companyId, array $permissionCodes","Output":"array (başarı ve hata bilgisi)"},"assignUserPermission":{"Purpose":"Belirli bir kullanıcıya izin atar (user_permissions).","Input":"array $data (user_id, permission_code, company_id, expires_at vb.)","Output":"array"},"assignRolePermission":{"Purpose":"Belirli bir role izin atar (role_permissions).","Input":"string $role, string $permissionCode","Output":"array"},"getUserPermissions":{"Purpose":"Kullanıcının belirli bir varlıktaki (company_id gibi) izinlerini döner.","Input":"int $userId, int|null $companyId","Output":"array (izin kodları)"},"removeUserPermission":{"Purpose":"Kullanıcıdan belirli bir izni siler (user_permissions).","Input":"int $userId, string $permissionCode, int|null $companyId","Output":"array"},"getPermissionDetails":{"Purpose":"Belirli bir izin kodunun detaylarını getirir (permissions tablosundan).","Input":"string $code","Output":"array (izin detayı)"},"listRolePermissions":{"Purpose":"Belirli bir role atanmış tüm izinleri listeler (role_permissions tablosundan).","Input":"string $role","Output":"array"}},"ErrorHandling":{"Purpose":"Hatalar logger üzerinden kaydedilir veya Exception olarak fırlatılır. API çağrılarında JSON formatında hata yanıtı döner."},"InputOutputSummary":{"Input":"Kullanıcı ID, rol ID, permission_code, entity_id, entity_type gibi erişim kontrol parametreleri.","Output":"Başarı durumunda true/false veya JSON response (success, message, data, errors, statusCode vb.)."},"Recommendations":["Entity bazlı yetki kontrolü genişletilebilir (ör. project, team gibi).","Rate limiting gibi güvenlik kontrolleri (brute force önleme) eklenebilir.","Access level kontrolleri merkezi PermissionHelper’a taşınabilir.","İzinlerin cache üzerinden yönetimi performansı artırabilir (ör. Redis)."]}}},"PermissionHelper.php":{"type":"file","Purpose":"Farklı erişim düzeylerini kontrol eden yardımcı sınıf. Entity bazlı (ör. company, project gibi) sahiplik ve erişim yetkisini kontrol eder.","Imports":["CRUDHandler"],"Classes":{"PermissionHelper":{"Purpose":"Yetki ve erişim düzeyi kontrolünü (visibility scope) entity tabanlı olarak merkezi şekilde gerçekleştirir.","Methods":{"checkVisibilityScope":{"Purpose":"Belirtilen scope’a göre kullanıcıya erişim izni verilip verilmediğini döner (örn: owner, followers, approved, members, admin).","Input":"string $scope (örn: own, ownperm, followers), int $userId (kullanıcı ID), array $context (entity bilgileri, tablolar vb.).","Output":"bool (true: erişim izni var, false: erişim yok)"}},"ErrorHandling":{"Purpose":"Hatalı parametre gibi durumlarda false döner. Loglama yok, sadece kontrol amaçlı yardımcı sınıftır."},"InputOutputSummary":{"Input":"scope (ör: own, members vb.), kullanıcı ID’si, context (entity ve ilişkili tablolar).","Output":"bool (true/false)"},"Recommendations":["Gerekirse scope seviyeleri için yeni case’ler eklenebilir (ör. guest, editor gibi roller).","Daha karmaşık entity yapılarında helper fonksiyonları genişletilebilir (ör. proje -> ekip -> görev ilişkisi).","Performans için sorgulara index eklenmesi önerilir (özellikle büyük tablolar için)."]}}},"ReportHandler.php":{"type":"file","Purpose":"Kullanıcı raporları, günlük aktivite raporları ve genel sistem istatistikleri için PHP handler sınıfı.","Imports":["DatabaseHandler","CRUDHandler"],"Classes":{"ReportHandler":{"Purpose":"Raporlama ihtiyaçlarını merkezi şekilde karşılar (kullanıcı raporu, günlük rapor ve sistem istatistikleri).","Properties":{"crud":"Veritabanı işlemlerini yürüten CRUDHandler nesnesi."},"Methods":{"__construct":{"Purpose":"CRUDHandler bağımlılığını başlatır.","Input":"Yok","Output":"Yok"},"getUserReport":{"Purpose":"Belirli bir kullanıcıya ait temel bilgileri rapor olarak döner.","Input":"int $userId","Output":"array (id, name, email, created_at) - Kullanıcı bilgileri"},"getDailyActivityReport":{"Purpose":"Belirli bir tarih için log tablosundaki eylem sayısını (action bazlı) raporlar.","Input":"string $date","Output":"array (action, total) - Eylem bazlı log raporu"},"getSystemStats":{"Purpose":"Sistem genelindeki toplam kullanıcı, onaylı kullanıcı ve log sayısını döner.","Input":"Yok","Output":"array (total_users, verified_users, total_logs)"}},"ErrorHandling":{"Purpose":"CRUDHandler üzerinden yönetilir. Hatalı sorgu durumunda boş veri dönebilir veya Exception atılabilir."},"InputOutputSummary":{"Input":"Kullanıcı ID, tarih gibi rapor parametreleri.","Output":"JSON response formatında veri (başarılı sorgularda array, hata durumunda boş veya Exception)."},"Recommendations":["Raporları zaman bazlı (haftalık, aylık) olarak genişletmek için yeni metotlar eklenebilir.","getSystemStats metodunda log seviyelerine göre (info, error) ayrı ayrı raporlama eklenebilir.","getDailyActivityReport için parametre olarak eylem (action) filtresi eklenebilir."]}}},"ShipHandler.php":{"type":"file","Purpose":"Gemi tipleri gibi gemi ile ilgili verilerin yönetimini sağlayan handler sınıfı.","Imports":["CRUDHandler","Illuminate\\Database\\Capsule\\Manager"],"Classes":{"ShipHandler":{"Purpose":"Gemilere dair işlemleri yönetir. Şu an için sadece ship_types tablosunu döner, ileride genişletilebilir.","Properties":{"crud":"Veritabanı işlemleri için CRUDHandler nesnesi.","logger":"Monolog logger - Hataları kaydeder.","loggerInfo":"Monolog info logger - Bilgi loglarını tutar."},"Methods":{"__construct":{"Purpose":"CRUDHandler ve logger'ları başlatır.","Input":"Yok","Output":"Yok"},"buildResponse":{"Purpose":"Yanıtı standart JSON formatına dönüştürür.","Input":"bool $success, string $message, array $data, bool $showMessage, array $errors","Output":"array (success, message, data, errors, showMessage)"},"getShipTypes":{"Purpose":"Tüm gemi tiplerini ship_types tablosundan alır ve döner.","Input":"Yok","Output":"array (JSON yanıt: success, message, data)"}},"ErrorHandling":{"Purpose":"Hatalar logger aracılığıyla kaydedilir ve JSON yanıtı döner."},"InputOutputSummary":{"Input":"Yok (ileride createShipType, deleteShipType gibi metodlara input eklenebilir).","Output":"JSON response formatında veri (success, message, data, errors vb.)."},"Recommendations":["Yeni metotlar eklenerek (ör. createShipType) gemi tipleri CRUD akışı tamamlanabilir.","getShipTypes metodu için önbellekleme (cache) desteği eklenerek performans artırılabilir.","Logger seviyeleri (info, error) farklı log dosyalarına yönlendirilebilir."]}},"UserHandler.php":{"type":"file"}},"UserHandler.php":{"type":"file","Purpose":"Kullanıcı yönetimi, kimlik doğrulama, yetkilendirme ve kullanıcıyla ilişkili diğer işlemleri merkezi şekilde yöneten PHP sınıfı.","Imports":["MailHandler","CRUDHandler","Firebase\\JWT\\Key","Illuminate\\Database\\Capsule\\Manager","Firebase\\JWT\\JWT","Firebase\\JWT\\ExpiredException"],"Classes":{"UserHandler":{"Purpose":"Kullanıcı işlemleri (kayıt, giriş, JWT oluşturma/doğrulama, profil güncelleme, parola değiştirme, bildirim ayarları) için handler.","Properties":{"mailHandler":"E-posta gönderimi için MailHandler nesnesi.","crud":"Veritabanı işlemleri için CRUDHandler nesnesi.","logger":"Monolog logger - Hataları kaydeder.","loggerInfo":"Monolog info logger - Bilgi loglarını tutar."},"Methods":{"validateAndRegisterUser":{"Purpose":"Kullanıcı kaydını e-posta doğrulama akışıyla birlikte başlatır.","Input":"array $data","Output":"array (success, message, error vb.)"},"login":{"Purpose":"Kullanıcı girişini JWT ve Refresh Token mantığıyla gerçekleştirir.","Input":"array $data (email, password, device_uuid vb.)","Output":"array (success, token, refresh_token vb.)"},"refreshAccessToken":{"Purpose":"Verilen refresh token'ı doğrular ve yeni access token üretir.","Input":"string $refreshToken","Output":"array (success, data)"},"updateUser":{"Purpose":"Kullanıcı bilgilerini günceller.","Input":"int $userId, array $data","Output":"array"},"deleteUser":{"Purpose":"Kullanıcıyı veritabanından siler.","Input":"int $userId","Output":"array"},"getUserById":{"Purpose":"Belirli kullanıcıyı döner.","Input":"int $userId","Output":"array"},"getAllRoles":{"Purpose":"Tüm rollerin listesini döner (roles tablosu).","Input":"Yok","Output":"array"},"getUsersWithRoles":{"Purpose":"Kullanıcıları rol isimleriyle birlikte listeler.","Input":"Yok","Output":"array"},"sendVerificationEmail":{"Purpose":"Kayıt sonrası e-posta doğrulama maili gönderir.","Input":"string $email, string $token","Output":"bool"},"changePassword":{"Purpose":"Kullanıcının mevcut parolasını kontrol eder ve yeni parolayla günceller.","Input":"array $data (current_password, new_password)","Output":"array"},"getNotificationSettings":{"Purpose":"Kullanıcının bildirim ayarlarını getirir.","Input":"array $data (opsiyonel: user_id)","Output":"array"},"saveNotificationSettings":{"Purpose":"Kullanıcının bildirim ayarlarını kaydeder.","Input":"array $data (email_notifications, app_notifications, weekly_summary vb.)","Output":"array"},"logout":{"Purpose":"Kullanıcının refresh token'ını siler (tüm cihazlardan çıkış veya tek cihaz).","Input":"string $refreshToken, string|null $deviceUUID, bool $allDevices","Output":"array"},"validateToken":{"Purpose":"Verilen refresh token’ın geçerli olup olmadığını kontrol eder.","Input":"array $data (refresh_token)","Output":"array"},"validateJWT":{"Purpose":"JWT token’ı decode eder ve kontrol eder.","Input":"string $token","Output":"object|Exception"},"generateJWT":{"Purpose":"Kullanıcı bilgileriyle yeni JWT token oluşturur.","Input":"object $user","Output":"string"},"cleanExpiredTokens":{"Purpose":"Süresi geçmiş refresh token'ları temizler.","Input":"Yok","Output":"Yok"},"getUserIdFromToken":{"Purpose":"Authorization header'dan JWT'yi çözerek user_id döner (statik).","Input":"Yok","Output":"int|null"}},"ErrorHandling":{"Purpose":"Tüm hatalar Monolog logger'a kaydedilir ve API'ye JSON yanıtı döner."},"InputOutputSummary":{"Input":"Kullanıcı kimlik bilgileri (JWT, email, password), HTTP istek parametreleri, refresh token.","Output":"Başarı durumunda JSON yanıt (success, message, data vb.)."},"Recommendations":["JWT süresi ve Refresh Token süresi config.php üzerinden yönetilebilir.","Login metodu için brute force koruması (ör. rate limit) eklenebilir.","Email doğrulama ve parola sıfırlama akışı loglaması iyileştirilebilir."]}}}},"js":{"type":"directory","passwordReset.js":{"type":"file","Purpose":"Şifre sıfırlama formu için istemci taraflı validasyon sağlar. Hatalı girişleri engeller ve kullanıcı dostu hata mesajları gösterir.","Methods":{"DOMContentLoaded Event Listener":{"Purpose":"Sayfa tamamen yüklendiğinde formun validasyonunu başlatır.","Input":"Yok","Output":"Yok"},"showError":{"Purpose":"İlgili input öğesine hata mesajını gösterir ve border rengini kırmızı yapar.","Input":"input öğesi, hata mesajı (string)","Output":"Yok"},"clearError":{"Purpose":"Input öğesindeki hata mesajını temizler ve border rengini eski haline getirir.","Input":"input öğesi","Output":"Yok"},"Form Submit Handler":{"Purpose":"Form gönderilmeden önce şifre alanlarının kontrolünü yapar. Hatalıysa submit’i engeller.","Input":"Form submit event","Output":"Form gönderimi ya tamamlanır ya da engellenir (preventDefault ile)."}},"ErrorHandling":{"Purpose":"Hatalı alanlar anında border rengi ve error-message ile kullanıcıya bildirilir. Valid değilse form gönderimi engellenir."},"InputOutputSummary":{"Input":"Kullanıcıdan form içi input (şifre, şifre tekrar).","Output":"Geçerli ise form gönderilir, değilse hata mesajları görüntülenir."},"Recommendations":["Hataları input alanı blur olduğunda da kontrol edebilirsin (blur event).","Şifre karmaşıklığı kuralları (örn: bir büyük harf, bir sayı) ekleyebilirsin.","Hata mesajlarını ikonlarla güçlendirebilir, kullanıcı dostu hale getirebilirsin."]}}},"public":{"type":"directory","api.php":{"type":"file","Purpose":"API endpoint yönlendirme ve yönetim dosyası. Tüm gelen istekleri doğru handler'a yönlendirir ve JWT doğrulaması yapar.","Imports":["UserHandler","CRUDHandler","DatabaseHandler","PasswordResetHandler","CVHandler","ShipHandler","PermissionHandler","ImageUploadHandler"],"Endpoints":["login","register","reset_password","reset_password_request","refresh_token","logout","get_user_info","update_user","check_user_data","check_cover_images","get_notification_settings","save_notification_settings","get_users_with_roles","create_company","create_user_company","get_user_companies","update_company","delete_company","get_user_company_role","get_company_employees","get_company_followers","get_company_detail","get_company_types","get_position_areas","get_positions_by_area","get_positions_by_handler","get_permission_details","list_role_permissions","assign_role_permission","assign_user_permission","update_user_permissions","get_all_permissions","get_user_permissions","check_permission","upload_image","upload_image_general","change_password","check_token","listCountries","listCitiesByCountry","update_cv","get_user_cvs","get_ship_types"],"TokenValidation":{"Purpose":"Endpoint'e göre JWT doğrulaması yapar. Gerekirse 401 yanıtı döner.","PublicEndpoints":["login","register","reset_password","reset_password_request","refresh_token","check_token"]},"Methods":{"jsonResponse":{"Purpose":"API'nin standart yanıt formatını hazırlar ve JSON döner.","Input":"Başarı durumu, mesaj, data, errors, http kodu, showMessage","Output":"JSON response"},"jsonResponseFromArray":{"Purpose":"Yanıtı hazır JSON formatında diziden oluşturur.","Input":"Response array","Output":"JSON response"}},"ErrorHandling":{"Purpose":"try-catch bloğu ile global API hatalarını yakalar ve loglar. Kullanıcıya genel bir hata mesajı döner."},"InputOutputSummary":{"Input":"HTTP istekleri (GET/POST), JSON verisi (php://input), Header Authorization","Output":"JSON yanıtları, HTTP kodları ve loglama"},"Recommendations":["Kullanıcı dostu hata mesajlarını koruyarak, hata kodlarını da JSON'da gönder.","Geliştirmeler için yeni endpoint'leri modüler handler sınıflarında yönetmeye devam et.","Gereksiz tekrarları azaltmak için bazı endpoint case'lerini alt fonksiyonlara bölmeyi düşünebilirsin."]},"api":{"type":"directory","reset_password.api.php":{"type":"file","Purpose":"API endpoint yönlendirme ve yönetim dosyası. Tüm gelen istekleri doğru handler'a yönlendirir ve JWT doğrulaması yapar.","Imports":["UserHandler","CRUDHandler","DatabaseHandler","PasswordResetHandler","CVHandler","ShipHandler","PermissionHandler","ImageUploadHandler"],"Endpoints":["login","register","reset_password","reset_password_request","refresh_token","logout","get_user_info","update_user","check_user_data","check_cover_images","get_notification_settings","save_notification_settings","get_users_with_roles","create_company","create_user_company","get_user_companies","update_company","delete_company","get_user_company_role","get_company_employees","get_company_followers","get_company_detail","get_company_types","get_position_areas","get_positions_by_area","get_positions_by_handler","get_permission_details","list_role_permissions","assign_role_permission","assign_user_permission","update_user_permissions","get_all_permissions","get_user_permissions","check_permission","upload_image","upload_image_general","change_password","check_token","listCountries","listCitiesByCountry","update_cv","get_user_cvs","get_ship_types"],"TokenValidation":{"Purpose":"Endpoint'e göre JWT doğrulaması yapar. Gerekirse 401 yanıtı döner.","PublicEndpoints":["login","register","reset_password","reset_password_request","refresh_token","check_token"]},"Methods":{"jsonResponse":{"Purpose":"API'nin standart yanıt formatını hazırlar ve JSON döner.","Input":"Başarı durumu, mesaj, data, errors, http kodu, showMessage","Output":"JSON response"},"jsonResponseFromArray":{"Purpose":"Yanıtı hazır JSON formatında diziden oluşturur.","Input":"Response array","Output":"JSON response"}},"ErrorHandling":{"Purpose":"try-catch bloğu ile global API hatalarını yakalar ve loglar. Kullanıcıya genel bir hata mesajı döner."},"InputOutputSummary":{"Input":"HTTP istekleri (GET/POST), JSON verisi (php://input), Header Authorization","Output":"JSON yanıtları, HTTP kodları ve loglama"},"Recommendations":["Kullanıcı dostu hata mesajlarını koruyarak, hata kodlarını da JSON'da gönder.","Geliştirmeler için yeni endpoint'leri modüler handler sınıflarında yönetmeye devam et.","Gereksiz tekrarları azaltmak için bazı endpoint case'lerini alt fonksiyonlara bölmeyi düşünebilirsin."]},"reset_password.php":{"type":"file","Purpose":"Şifre sıfırlama işlemini yöneten bir frontend ve backend PHP sayfası. Token doğrulama, şifre sıfırlama formu gösterme ve yeni şifreyi kaydetme adımlarını içerir.","Imports":["PasswordResetHandler"],"Input":["GET parametresi: token (şifre sıfırlama bağlantısından)","POST parametreleri: new_password, confirm_password (yeni şifre ve tekrar şifre)"],"Output":["HTML sayfası (şifre sıfırlama formu ve mesajlar)"],"KeyFlow":["GET isteği ile token doğrulaması yapılır (showForm durumu belirlenir).","POST isteğinde yeni şifre alanları kontrol edilir.","Yeni şifreler eşleşiyorsa ve uzunluk uygun ise PasswordResetHandler ile şifre sıfırlama çağrılır.","Sonuç mesajı HTML sayfasında gösterilir."],"FrontendElements":["HTML formu: yeni şifre ve onay şifre alanları","CSS: ../../lib/css/mail.css","JavaScript: ../../lib/js/passwordReset.js (form içi validasyon ve UI desteği)"],"SecurityNotes":["GET parametresindeki token hassas olduğu için doğrudan HTML'de kullanılmadan önce htmlspecialchars ile encode edilir.","Şifre uzunluğu ve eşleşme kontrolleri hem frontend (JS) hem de backend (PHP) tarafında yapılır."],"Recommendations":["Form validasyonunu geliştirmek için ek kurallar (örneğin özel karakter, sayı, büyük harf) eklenebilir.","Başarılı işlem sonrası yönlendirme (örneğin login sayfasına) eklenebilir."]},"verify_email.php":{"type":"file","Purpose":"Kullanıcının e-posta doğrulama sürecini yönetir. Token kontrolü, e-posta doğrulama ve tekrar gönderim gibi işlevleri barındırır.","Imports":["DatabaseHandler","CRUDHandlers","MailHandler"],"Input":["GET parametresi: token (e-posta doğrulama bağlantısından)","POST parametreleri: resend_email (tekrar gönderme için), email (yeni e-posta adresi)"],"Output":["HTML sayfası (başarı, hata veya bilgi mesajı)"],"KeyFlow":["GET isteği ile gelen token kontrol edilir, eğer geçerli ise kullanıcı e-posta doğrulanır ve kullanıcı rolü güncellenir.","Eğer token süresi dolmuş veya geçersiz ise kullanıcıya tekrar e-posta gönderme seçeneği sunulur.","POST isteğiyle kullanıcı e-posta adresini gönderir, eğer geçerli bir e-posta adresi ise yeni bir doğrulama e-postası gönderilir.","Sonuçlar HTML sayfasında mesaj olarak gösterilir."],"FrontendElements":["HTML formu: e-posta doğrulama linki bitmişse, kullanıcı e-posta adresini tekrar girebilir.","CSS: ../../lib/css/mail.css"],"SecurityNotes":["GET ve POST parametreleri htmlspecialchars() ile HTML encode edilerek XSS önlenir.","Token doğrulama sırasında veritabanında hem token hem de geçerlilik süresi kontrolü yapılır."],"Recommendations":["E-posta şablonlarının daha kullanıcı dostu ve markaya uygun görünüme sahip olması sağlanabilir.","Başarılı e-posta doğrulaması sonrası kullanıcı login sayfasına yönlendirilebilir.","Başarısız doğrulama durumunda, kullanıcıya neden başarısız olduğu detaylıca açıklanabilir (örneğin, 'Token expired' gibi)."]}}}}}